Project management methodologies to use during the next three yearsS Boshoff Supervisor:	Prof Neels Kruger Student number: 31775357Table of contentsList of TablesIntroductionInformation and communication technology (ICT) has become crucial in improving productivity and economic growth throughout the world (Arellano & Camara, 2017:1). As such, countless ICT projects have been implemented, but many have failed (Ebad, 2018). Although there can be many reasons why an ICT project fails, most often the chosen project management methodologies are not used to their full potential, thus leading to weak management and a failed project. Recent happenings around the world, such as COVID-19, have also made it difficult for businesses to successfully implement ICT projects.In this article, I will be discussing three project management methodologies that I think are best suited for ICT projects in the current environment. I will compare each in terms of the SWOT analysis and discuss which methodology will be the most effective for ICT projects within the next three to five years, taking into account the state of the world in 2022. I will discuss each methodology regarding external and internal clients and how each methodology is influenced by bodies of knowledge and governance frameworks. The governance framework that will be discussed is COBIT 2019, the body knowledge Project Management Body of Knowledge (PMBOK), and the three project management methodologies are Projects IN Controlled Environments (PRINCE2), Agile, and Waterfall.Chapter 1  governance frameworkCOBIT 2019COBIT 2019 is a governance and management framework used by enterprises for information and technology processes (ISACA, 2018:9). It is considered the best practice framework to be used if an enterprise has anything to do with information and technology processes (ISACA, 2018:9). COBIT 2019 has two main disciplines that include a range of activities, different organisational structures, and distinct goals (ISACA, 2018:9). These two disciplines are governance and management.Governance ensures that stakeholder demands, conditions, and choices are assessed to establish balanced, mutually agreed-upon corporate goals, the direction of the organisation is established via prioritising and decision-making, and that performance and compliance are measured in relation to agreed-upon goals and objectives (ISACA, 2018:9). Management plans, creates, runs, and oversees operations following the governance body’s instructions to accomplish enterprise objectives (ISACA, 2018:9).Processes, organisational structures, policies and procedures, information flows, culture and behaviours, skills, and infrastructure are the components defined by COBIT to develop and maintain a governance system (ISACA, 2018:9). It describes the design considerations that should be taken into account by an organisation when creating a best-fit governance system (ISACA, 2018:9). It also handles governance concerns by collecting important governance components into management and governance objectives that can be controlled to the required competency levels (ISACA, 2018:9).The governance and management goals are divided into five domains:The governance goals are divided in the Evaluate, Direct and Monitor (EDM) domain. The governing body evaluates strategic possibilities, directs top management on the selected possible strategies, and monitors strategy implementation in this domain (ISACA, 2018:10).The management goals are divided into four domains (ISACA, 2018:10):Align, Plan and Organise takes care of the overarching structure, strategy, and supporting activities for information and technology.Build, Acquire and Implement refers to the definition, purchase, and deployment of information and technology solutions, as well as their integration with business processes.Deliver, Service and Support is a framework for delivering and supporting information and technology services.Monitor, Evaluate and Assess covers performance measurement and information and technology conformity to external requirements, internal performance targets, and internal control goals.ComponentsProcess componentSeveral process techniques are included in each governance and management goal, with one or more activities in each process (ISACA, 2018:19). All process activities are assigned a capability level, allowing for a clear characterization of processes at various capacity levels (ISACA, 2018:20). When all actions at a certain capacity level are completed successfully, the process is said to have reached that level (ISACA, 2018:20). A Capability Maturity Model Integration based process-capability scheme, spanning from 0 to 5, is supported by COBIT 2019 (ISACA, 2018:20). The capacity level indicates how successfully a process has been implemented and is performing (ISACA, 2018:20). Organisational structures componentThe governance component of organisational structures implies degrees of authority and accountability for process practices (ISACA, 2018:20), in the form of roles assigned to the people involved in a project. These structures’ many levels of engagement can be categorised into responsible and accountable levels (ISACA, 2018:22). Responsible roles are in charge of carrying out the practice and achieving the desired result (ISACA, 2018:22). Overall responsibility is carried through accountable positions (ISACA, 2018:22). Accountability cannot be shared as a principle (ISACA, 2018:22). Information flows and items componentEach practice has inputs and outputs, as well as origin and destination indicators (ISACA, 2018:22). Each output is often transmitted to one or a small number of destinations, usually another COBIT process practice (ISACA, 2018:22). Every output becomes a destination input (ISACA, 2018:22). However, several outputs have multiple destinations (ISACA, 2018:23).People, skills and competencies componentThe human resources and skills needed to fulfil the governance or management goal are identified in this component (ISACA, 2018:25). Policies and procedures componentThis component contains specific information on policies and procedures that are important to the governance or management goal (ISACA, 2018:25).Culture, ethics and behaviour componentThis component gives extensive guidance on desired cultural characteristics inside the business that assist the attainment of a governance or management goal (ISACA, 2018:25).Services, infrastructure and applications componentThis component provides specific information about third-party services, infrastructure types, and application categories that can be used to help accomplish a governance or management goal (ISACA, 2018:25).Each of these components has to be present in any project management methodology for the project to be successful. The following section will discuss the body of knowledge, PMBOK, that should be applied in every project.Chapter 2  body of knowledgePMBOKThe standard for project managementThe Project Management Institute (PMI) (2021:33) states that “The Standard for Project Management identifies project management principles that guide the behaviors and actions of project professionals and other stakeholders who work on or are engaged with projects.”The standard for project management provides project management principles that guide project professionals and other stakeholders that work on or are involved with a project in their behaviours and activities (PMI, 2021:33). The standard sets the context for value delivery, project functions, product management, governance, and the project environment (PMI, 2021:36). Each of these contexts has to be present during the management of a project for the project to be successful. Creating valueValue is created for stakeholders by organisations (PMI, 2021:36). There are five ways this can be done mentioned by the Project Management Institute (PMI) (2021):Developing a new service, product or outcome that addresses the demands of clients or end-users.Making a good environmental or social impact.Improving productivity, responsiveness, efficiency, or effectiveness.Facilitating the necessary adjustments for the organisation’s transition to its intended future state.Benefits that have been sustained as a result of earlier initiatives, projects, or company activities.Portfolios, programmes, projects, products, and operations are all components that may be employed separately or together to produce value (PMI, 2021:37). These elements, when combined, provide a value-delivery system that is in line with the organisation’s strategy (PMI, 2021:37). Information and feedback are transmitted regularly throughout all components of a value delivery system, keeping the system attentive to the environment and aligned with strategy (PMI, 2021:38).Organisational governance systemsTo ensure seamless operations, resolve difficulties, and assist decision-making, the governance system works in tandem with the value delivery system (PMI, 2021:39). Governance systems give a structure for activities, including functions and procedures (PMI, 2021:39). Control, oversight, component integration, decision-making skills, and value assessment are all features of a governance structure (PMI, 2021:39).Systems of governance give an integrated framework for assessing environmental changes, concerns, and risks, as well as any other component in the value delivery system (PMI, 2021:39). Portfolio objectives, programme benefits, and project deliverables are all included (PMI, 2021:39). Projects might be part of a larger programme or portfolio, or they can stand alone (PMI, 2021:40). PMI (2021:40) also states that “In some organizations, a project management office might support programs and projects within a portfolio.” The authority to approve modifications and conduct other project-related business decisions is defined by project governance (PMI, 2021:40). Program and/or organisational governance are in sync with project governance (PMI, 2021:40).Functions associated with projectsProject delivery is driven by people (PMI, 2021:40). They accomplish so by performing functions that are required for the project to run well (PMI, 2021:40). PMI (2021:40) states that “The needs of the project, organization, and environment influence which functions are used on a project and how those functions are carried out.” There are eight functions provided by PMI (2021):Provide oversight and coordination: this role assists the project team in achieving the project’s objectives by coordinating the project’s activities (PMI, 2021:40). Consulting with senior and business unit executives on ideas for advancing objectives, enhancing project performance, or addressing customer demands is part of the coordination process (PMI, 2021:41). It may also entail assistance with business analysis, tendering and contract negotiations, and the building of business cases (PMI, 2021:41). After the project deliverables are completed but before the project is officially closed, oversight might be involved in actions relating to benefit the realisation and sustainability (PMI, 2021:41). This function can help with portfolios and programs where the project is started (PMI, 2021:41).Present objectives and feedback: customers and end-users provide viewpoints, insights, and clear direction to those in this job (PMI, 2021:41). They must provide clear direction on project needs, outputs, and expectations (PMI, 2021:41). Because project teams are exploring and developing product features within precise increments in adaptive and hybrid project contexts, the demand for continual input is increased (PMI, 2021:41).Facilitate and support: depending on the nature of the project, facilitation and support may be closely tied to providing oversight and coordination (PMI, 2021:41). Encouraging project team member engagement, teamwork, and a shared feeling of responsibility for the work output are all part of the job (PMI, 2021:41). Facilitation assists the project team in reaching an agreement on solutions, resolving problems, and making choices (PMI, 2021:41).Contribute insights and perform work: as stated by PMI (2021:42), “This group of people provides the knowledge, skills, and experience necessary to produce the products and realize the outcomes of the project.” PMI (2021:42) further states that “Gaining insights from cross-functional project team members representing different parts of the organization can provide a mix of internal perspectives, establish alliances with key business units, and encourage project team members to act as change agents within their functional areas.” Apply expertise: this role provides a project with knowledge, vision, and competence in a given field (PMI, 2021:42). They provide guidance and assistance across the company, as well as contribute to the learning and accuracy of the project team (PMI, 2021:42).Provide insight and business direction: this function’s members steer and explain the project’s or product’s direction (PMI, 2021:42). Prioritising needs or backlog items based on business value, dependencies, and technical or operational risk is part of this activity (PMI, 2021:42).Provide direction and resources: this function promotes the project and communicates the organisation’s goals, vision, and the project team's expectations and other stakeholders (PMI, 2021:43). They assist in securing the resources, choices, and authority that permits project activities to proceed by advocating for the project and the project team (PMI, 2021:43). This job can help with innovation by recognising and sharing opportunities that exist inside the project to top management (PMI, 2021:43).Maintain governance: people who work in the governance role accept and support the project team’s suggestions and keep track of the project’s progress toward its goals (PMI, 2021:43). They keep the lines of communication open among project teams, as well as strategic or business objectives that may shift over time (PMI, 2021:43).The project environment“Projects exist and operate within internal and external environments that have varying degrees of influence on value delivery.” (PMI, 2021:43). The internal and external environments might have an impact on project planning and other operations (PMI, 2021:43). As stated by PMI (2021:43) “These influences can yield a favorable, unfavorable, or neutral impact on project characteristics, stakeholders, or project teams.”Internal environment: internal factors might stem from the company itself, a program, a portfolio, a different project, or a mix of these, including artefacts, practices, and internal knowledge (PMI, 2021:44). Examples of internal factors provided by PMI (2021) include:External environment: external factors can impact project outcomes in a positive, negative, or neutral way (PMI, 2021:45). Examples provided by PMI (2021):Product management considerationsA product is a manufactured, quantified artefact that can be either a finished product or a component (PMI, 2021:45). As stated by PMI (2021:46-47) “Product management involves the integration of people, data, processes, and business systems to create, maintain, and develop a product or service throughout its life cycle. The product life cycle is a series of phases that represents the evolution of a product, from introduction through growth, maturity, and to retirement.” At any stage during the product life cycle, product management can start programs or projects to build or improve certain components, functions, or capabilities (PMI, 2021:46). Product management takes many forms, including (PMI, 2021:46-47):Program management within a product life cycle: subsidiary programs, related projects, and program activities are all included in this method.Project management within a product life cycle: as a continuous business activity, this method controls the development and maturation of product capabilities.Product management within a program: within the scope and constraints of a specific programme, this technique applies to the whole product life cycle.Project management principlesProfessional principles serve as guiding principles for strategy, decision-making, and problem-solving (PMI, 2021:48). PMI (2021) gives eleven principles for project management for guidance:Be a diligent, respectful, and caring steward Create a collaborative project team environmentEffectively engage with stakeholdersFocus on valueRecognise, evaluate, and responds to system interactionsDemonstrate leadership behavioursTailor based on contextBuild quality into processes and deliverablesNavigate complexityOptimise risk responsesEmbrace adaptability and resiliencyEnable change to achieve the envisioned future stateCOBIT 2019 used with PMBOK sets the base for the steps and processes that should be followed in any information technology project. The following sections will discuss project management methodologies and how COBIT 2019 and PMBOK affect them.Chapter 3  project management methodologiesPRINCE2Malsam (2021) defines the PRINCE2 methodology as a method that “focuses on managing resources and risks by dividing projects into smaller stages, defining clear roles and responsibilities and using seven processes to manage the project life cycle.” Since the start of COVID19 around the world, organisations have had to adapt to ensure they survive economically. Thomson (2020) gave examples for each of the principles on how a project team can adapt to working from home.Seven principlesContinued business justificationThis includes having a well-defined business case, a specified consumer, attainable benefits, and a thorough cost analysis (Slate, 2021). From a professional standpoint, the project team should have agreed-upon objectives that drive their daily responsibilities and provide a clear framework for their most critical actions when working from home (Thomson, 2020).Learn from experienceAt each stage of the PRINCE2 process, lessons are learned and documented and used to better future work (Slate, 2021). Learning to solve issues, teaching other members of the project team, and adapting to new technologies and methods of working will make the project team’s remote working experience more manageable (Thomson, 2020).Roles and responsibilities are definedEveryone has to have a clear idea of their own responsibilities as well as those of their team members (Slate, 2021). It is critical that everyone on the project team understands their jobs and duties as this makes deciding who to invite to virtual meetings much easier (Thomson, 2020). Additionally, team members whose workloads are lowered due to remote working may be redeployed to assist other teams with higher workloads (Thomson, 2020).Manage by stagesThe projects are divided into individual work phases, with frequent reviews to document lessons learned and to ensure the project is still on schedule to satisfy the requirements (Slate, 2021). Starting and finishing different activities adds diversity to your life while reducing stress (Thomson, 2020).Manage by exceptionThe project board members don’t always have the time to handle the day-to-day activities of a project, so they establish baseline requirements and delegate these activities to the project manager (Slate, 2021). If concerns develop that influence the stated requirements, this is classified as an “exception”, and the board will choose the appropriate course of action (Slate, 2021). If a team member sees something that does not appear quite right, they should notify the other team members immediately and, if required, escalate the conversation and follow up in writing (Thomson, 2020). When everyone is working flexible hours remotely and handling multiple obligations, it is also crucial to be contactable for the other team members, even after hours (Thomson, 2020).Focus on productsA quality register is used to assess deliverables against specifications regularly (Slate, 2021).The products when working from home is how team members complete their work (Thomson, 2020).Tailor to suit the project environmentThe PRINCE2 approach should be changed to match the demands of each client project, with the degree of oversight and planning altered to fit the project’s size, number of people participating, and work package delegation (Slate, 2021).Team members should make sure to set up a productive remote working environment, as close to a business setting as possible (Thomson, 2020).Six roles to be filled in the PRINCE2 methodThe customerThis is the person or organization who ordered and will be funding the project (Willis, 2017). They own the business case and are responsible for ensuring that the project fulfils its requirements (Willis, 2017).The userThis is the representative of the people or organization that will use the product or service created by the project (Willis, 2017). The customer and user can be the same entity (Willis, 2017).The supplierThis is the person or organization that provides the necessary skills needed for the project (Willis, 2017).The project managerThe project manager is in charge of organising and managing the project, as well as selecting the team and ensuring that the project is finished on time, on budget, and to the needed quality standards (Willis, 2017).The project team and team managerThe project manager is often also the team manager on smaller projects. The team manager is in charge of overseeing the team member and making sure the daily tasks are done (Slate, 2021).Seven phases of the PRINCE2 methodStarting up a projectThis phase is about the planning that takes place before the project is considered to be taken on (Graham, 2009:18). This is done by submitting a project mandate that needs to be assessed by the organisation that received it (Slate, 2021). This phase also includes assigning project roles if it is decided that the project will be taken on (Graham, 2009:45).Initiating a projectA project initiation document is created that contains a detailed project plan and benchmarks for six performance goals as given by Slate (2021) “time, cost, quality, scope, risk, and benefits.” Directing a projectThis phase is continuous throughout the project. The project board manages the initiation phase, the delivery of the final product or service, and the closing of the project (Malsam, 2021).Controlling a stageIn this phase, the project manager breaks the project into smaller parts and assigns them to the project team (Slate, 2021).Managing product deliveryThe project manager has to make sure that the work is completed on time, within budget, fulfils the requirements set out in the project brief, and is of high quality (Slate, 2021).Managing stage boundariesThe project board has meetings after every stage of the project is completed to review whether that stage fulfils the requirements and meets the expectations of the customer (Slate, 2021). At these meetings, mistakes are recorded and passed on to the project team to learn from them and to ensure the same mistakes aren’t made in future projects (Slate, 2021).Closing the projectThe project manager makes sure all documentation, outcomes, and reposting is complete before handing over the final product or service to the customer (Slate, 2021).SWOT analysisTable 1-1: PRINCE2 SWOT analysisTable 1: PRINCE2 SWOT analysisGiven the results of the SWOT analysis, PRINCE2 has methods in place to be effective during threats such as the COVID-19 pandemic. AgileAccording to Workfront (2022a), “Agile project management is an iterative approach to project management that focuses on breaking down large projects into more manageable tasks, which are completed in short iterations throughout the project life cycle.” The Agile project management methodology is an iterative project management strategy that focuses on breaking large projects down into smaller, more manageable tasks that are accomplished in short iterations throughout the project life cycle (Workfront, 2022a). Agile teams are better equipped to accomplish work faster, adapt to changing project needs, and streamline their processes (Workfront, 2022a). It allows teams to re-evaluate their work and make adjustments in small increments to ensure that the team's focus fluctuates depending on the job and customer environment (Workfront, 2022a).There are four core values and twelve guiding principles in the Agile methodology (Workfront, 2022a). Agile also has key components, team roles, and six steps to be followed (Workfront, 2022a).Core valuesIndividuals and interactions over processes and toolsIt is critical to have the appropriate people on the project team for the project to succeed (Productboard, 2022). Even more crucial is how these people interact with one another (Productboard, 2022). Working softwareSoftware engineers used to spend hours creating extensive documentation (Productboard, 2022). Working software is more essential than documentation (Workfront, 2022a). This value focuses on offering developers exactly what they need to do their tasks without overloading them (Workfront, 2022a).Customer collaboration over contract negotiationOne of the most valuable assets in an Agile project is the customers (Workfront, 2022a). “Whether internal or external customers, involving them throughout the process can help to ensure that the end product meets their needs more effectively” (Workfront, 2022a). This method removes the need for a contract.Responding to changeThe world is not static, there is constant change that affects projects (Workfront, 2022a). A project team should be able to pivot and change course as necessary, with a flexible plan to reflect this (Workfront, 2022a).PrinciplesWhile each team's Agile methodology will be unique, the twelve principles should always guide the team's decisions and product development (Workfront, 2022a):Customer satisfaction is the project team’s first goal, thus they release excellent software early and often.Even late in the development process, project teams should welcome changing needs. Agile processes take advantage of change to provide customers with a competitive edge.Delivery projects regularly, ranging from a few weeks to a few months, with a preference for a shorter timeframe.Team members should collaborate daily throughout the project.Build initiatives around enthusiastic people. Provide them with the environment and support they require and trust them to do the task.The most efficient and successful means of delivering information to and within various teams is face-to-face interaction.The key indicator of progress is the finished product.Agile processes encourage sustainable development. All stakeholders should be able to keep up with each other indefinitely.A constant focus on technical excellence and smart design improve agility.Simplicity is key for maximising the quantity of labour not done.Self-organising teams produce the finest requirements, designs, and architectures.At regular intervals, the team evaluates how to improve its effectiveness, then adapts and modifies its behaviour accordingly.Key componentsUser storiesAs stated by Workfront (2022a), “Put simply, a user story is a high-level definition of a work request. It contains just enough information so the team can produce a reasonable estimate of the effort required to accomplish the request.” This short, basic explanation is provided from the perspective of the user and concentrates on describing what the customer’s goals are and why they need the product (Workfront, 2022a).Sprints“Sprints are a short iteration, usually between one to three weeks to complete, where teams work on tasks determined in the sprint planning meeting.” (Workfront, 2022a). As time goes on, the goal is to keep repeating these sprints until your product is feature-ready (Workfront, 2022a). After the sprint, you evaluate the product to determine what is and is not working, make changes, and start a new sprint to enhance the product or service (Workfront, 2022a).Stand-up meetingsDaily stand-up meetings, often known as “daily Scrum meetings”, are an excellent approach to keep everyone on track and informed (Workfront, 2022a). The participants are expected to remain standing during these meetings, which helps to keep the sessions brief and to the point (Workfront, 2022a). Agile boardAn Agile board allows your team to keep track of your project’s progress (Workfront, 2022a). This might be a basic Kanban board, a whiteboard with sticky notes, or a feature within your project management software (Workfront, 2022a).BacklogWhen project requests are submitted using the intake process, they become outstanding stories in the queue. (Workfront, 2022a). The team will estimate narrative points for each task during Agile planning meetings (Workfront, 2022a). Stories from the backlog are added to the sprint to be performed during the iteration during sprint preparation (Workfront, 2022a). In an Agile context, managing the backlog is critical for project managers (Workfront, 2022a).Agile team rolesDepending on the Agile method, particular team roles may or may not be required to conform to the framework (Workfront, 2022a).Scrum MasterEach sprint is kept on track by the Scrum Master, who assists in the resolution or removal of any concerns or barriers that may develop. (Workfront, 2022a). They are the team’s spokesperson (Workfront, 2022a).Product ownerThe product owner's responsibilities include setting the goals for each sprint, managing and prioritising the team backlog, and representing the client or internal stakeholder. (Workfront, 2022a).Team membersThe team members are responsible for carrying out the work in each sprint (Workfront, 2022a). “These teams, usually of three to seven people, can be composed of different specialties and strengths, or they can be teams of people with the same job roles.” (Workfront, 2022a).StakeholdersThis is only an informational role (Workfront, 2022a). Stakeholders should be brought up to date on the spring and product goals, given the chance to evaluate and approve work throughout the sprint, and be allowed to give input during the sprint retrospective (Workfront, 2022a). Steps to followProject planningBefore beginning any project, the team should be clear on the value to the organisation or client the final goals, and how they will be met (Workfront, 2022a). The team can construct a project scope here, but keep in mind that the goal of Agile project management is to be able to respond quickly to modifications and additions to the project, therefore the scope should not be regarded fixed (Workfront, 2022a).Product roadmap creationA roadmap is a set of requirements that will appear in the finished product (Workfront, 2022a). This is a key aspect of the Agile planning step because the team will build these specific features during each sprint (Workfront, 2022a). At this point, the team will also build a product backlog, which is a set of all the requirements and deliverables that will be included in the final product (Workfront, 2022a). When it comes to sprint planning, your team will pull items from this backlog (Workfront, 2022a).Release planningOne implementation date follows the completion of the entire project in traditional waterfall project management (Workfront, 2022a). When using Agile, the project will have shorter development cycles (known as sprints), with features being released after each cycle (Workfront, 2022a). Before beginning the project, the team will design a high-level strategy for feature releases, which they will revisit and reassess at the beginning of each sprint (Workfront, 2022a).Sprint planningPrior to the start of each sprint, all stakeholders must attend a sprint planning meeting to determine what each person will do during that sprint, how it will be completed, and to assess the task load (Workfront, 2022a). It is vital to allocate workload evenly among team members so that they can do their assigned tasks during the sprint. (Workfront, 2022a). For team openness, shared understanding, and detecting and reducing bottlenecks, the team will also need to visually describe their workflow (Workfront, 2022a).Daily stand-upsShort daily stand-up meetings should be held to assist the team in completing their duties throughout each sprint and determining whether any changes are required. (Workfront, 2022a). During these sessions, each team member will briefly describe what they did the day before and what they will be focusing on the next day. (Workfront, 2022a). These daily meetings should be limited to fifteen minutes (Workfront, 2022a). They are not intended to be prolonged problem-solving sessions or chances to talk about current events (Workfront, 2022a). Sprint review and retrospectiveAfter each sprint, the team will hold two meetings: the first will be a sprint review with project stakeholders, where they will be shown the finished product (Workfront, 2022a). This is a crucial aspect of maintaining open lines of communication with stakeholders (Workfront, 2022a). Both groups can create a relationship and discuss any product difficulties that arise during an in-person or video conference conversation (Workfront, 2022a). Second, there will be a retrospective sprint meeting with the stakeholders to talk about what could have gone better during the sprint, what went well, what was done, and whether the job load was too heavy or too low for each member (Workfront, 2022a).SWOT analysisTable 1-2: Agile SWOT analysisTable 2: Agile SWOT analysisGiven the results of the SWOT analysis, Agile could, in theory, present a problem for remote working conditions, but a study done by Neumann et al. (2021) found that the performance of Agile project teams has increased or stayed the same. The reason for this is because there is more transparency during the project, the team’s working time is better used, and there is optimized integration of the customer (Neumann et al., 2021:12-13).Waterfall Wrike (2022) states that “Waterfall project management maps out a project into distinct, sequential phases, with each new phase beginning only when the previous one has been completed. The Waterfall system is the most traditional method for managing a project, with team members working linearly towards a set end goal.” There will be no changes to the phases or goals, and each participant will have a clear role to play (Wrike, 2022). This methodology is suitable for projects that require a single timeframe and have long, detailed blueprints (Wrike, 2022). Change is often discouraged because it is costly (Wrike, 2022).Stages of the Waterfall methodologyThe Waterfall methodology is a sequential approach that works with set deadlines, requirements, and outcomes (Workfront, 2022). Individual teams are not required to be in constant communication with one another and are normally self-contained unless special integrations are necessary (Workfront, 2022). Team members often operate more independently and aren't required to make progress reports as frequently as they would in an Agile environment (Workfront, 2022).RequirementsThe Waterfall approach is based on the assumption that all project requirements can be acquired and understood in advance (Workfront, 2022). The project manager makes every effort to fully comprehend the project sponsor's expectations (Workfront, 2022). Written requirements are used to explain each stage of the project, including expenses, assumptions, risks, dependencies, success metrics, and completion timeframes, and are usually contained in a single document (Workfront, 2022).DesignTo overcome the challenges given by product requirements, software developers design scenarios, layouts, and data models. (Workfront, 2022). To begin, a higher-level or logical design is established, which outlines the project's objective and scope, as well as the overall traffic flow of each component and the integration points (Workfront, 2022). After that, it is turned into a physical design employing specialised hardware and software technologies (Workfront, 2022).ImplementationFollowing the completion of the design, technical execution begins (Workfront, 2022). Because arduous research and design have already been completed, this may be the fastest phase of the Waterfall process (Workfront, 2022). This phase involves programmers writing applications based on project needs and specifications, as well as some testing and implementation (Workfront, 2022). If major changes are required during this stage, it may be necessary to return to the design step (Workfront, 2022).Verification or testingBefore a product can be released to clients, it must be tested to ensure that it is free of flaws and meets all standards, assuring a great user experience with the application (Workfront, 2022). The testing team will use the product manager's design documents, personas, and use case scenarios to create their test cases (Workfront, 2022).Deployment and maintenanceAfter the programme has been deployed to the market or consumers, the maintenance phase begins (Workfront, 2022). A team will be formed to manage updates and the deployment of new software versions as bugs are detected and user requests for modifications are received (Workfront, 2022).SWOT analysisTable 1-3: Waterfall SWOT analysisTable 3: Waterfall SWOT analysisGiven the results of the SWOT analysis, the Waterfall methodology is not the most effective project management methodology to be used on software development projects when project teams have to work remotely. chapter 5 conclusionIn this article, three project management methodologies were discussed as well as COBIT 2019 and PMBOK. A SWOT analysis was conducted for each methodology to determine which methodology is the best to be used for projects during the next three years when more organisations adopt a hybrid working approach. A hybrid approach of PRINCE2 and Agile is the best approach for project management. The documentation process of PRINCE2 works well with the fast-paced development of Agile. Using these two in conjunction will provide the best method for managing projects where the project team have minimal face to face interactions.If the project team follows the guidelines set out in COBIT and PMBOK, their projects will most likely succeed with minimal issues.Bibliography Arellano, A. & Camara, N. 2017. The importance of ICT in society's needs: An empirical approach through Maslow's lens.15. https://www.bbvaresearch.com/en/publicaciones/the-importance-of-ict-in-societys-needs-an-empirical-approach-though-maslows-lens/ Date of access: 1 Mar 2022. Buehring, S. 2021. Prince2 benefits, advantages and disadvantages. https://www.knowledgetrain.co.uk/project-management/prince2/prince-2-course/prince2-benefits Date of access: 4 May.Ebad, S.A. 2018. An exploratory study of ICT projects failure in emerging markets. Journal of Global Information Technology Management, 21(2):139-160. https://doi.org/10.1080/1097198X.2018.1462071 Gallagher, P. 2019. 7 benefits of prince2 project management. https://blog.goodelearning.com/subject-areas/prince2/7-benefits-of-prince2-project-management/ Date of access: 28 April.Graham, N. 2009. Prince2 for dummies. 2nd. Chichester, West Sussex: John Wiley & Sons, Ltd.Iorio, M. 2018. Project methodology - Waterfall vs. Agile. https://www.linkedin.com/pulse/project-methodology-waterfall-vs-agile-mario-iorio/ Date of access: 15 May.ISACA. 2018. Cobit 2019: Governance and management objectives. ISACA.Kukhnavets, P. 2016. Strong and weak points of Agile. https://hygger.io/blog/agile-strong-and-weak-points/ Date of access: 12 May.Litten, D. 2018. Planning prince2 risk responses. https://www.projex.com/planning-prince2-risk-responses/ Date of access: 4 May.Malsam, W. 2021. What is prince2? Principles, aspects, roles & processes. https://www.projectmanager.com/blog/prince2-methodology Date of access: 28 April.Martin, M. 2022. What is Waterfall model in SDLC? Advantages and disadvantages. https://www.guru99.com/what-is-sdlc-or-waterfall-model.html Date of access: 15 May.Neumann, M., Bogdanov, Y., Lier, M. & Baumann, L. 2021. The sars-cov-2 pandemic and agile methodologies in software development: A multiple case study in germany. In. International Conference on Lean and Agile Software Development. Springer. pp. 40-58.Productboard. 2022. The four values of the Agile manifesto. https://www.productboard.com/glossary/agile-values/ Date of access: 10 May.Project Management Institute (PMI). 2021. The standard for project management and a guide to the project management body of knowledge (PMBOK guide). 7th. Pennsylvania, USA: Project Management Institute, Inc.Sinha, R., Shameem, M. & Kumar, C. 2020. SWOT: Strength, weaknesses, opportunities, and threats for scaling agile methods in global software development. In. Proceedings of the 13th innovations in software engineering conference on formerly known as India software engineering conference. pp. 1-10.Slate, A. 2021. Prince2: The reigning project management methodology. https://www.wrike.com/blog/project-management-basics-prince2-explained/ Date of access: 28 April.Teasdale, H. 2021. The strengths and weaknesses of Agile project management. https://i2a.co.uk/the-strengths-and-weaknesses-of-agile-project-management/ Date of access: 12 May.Thomson, A. 2020. Applying prince2 principles while working from home. https://www.axelos.com/resource-hub/blog/applying-prince2-principles-working-from-home Date of access: 10 May.Willis, R. 2017. The seven roles in prince2 projects. https://yourprojectmanager.com.au/roles-prince2-projects/ Date of access: 28 April.Workfront. 2022a. Agile project management. https://www.workfront.com/project-management/methodologies/agile Date of access: 10 May.Workfront. 2022b. Waterfall methodology. https://www.workfront.com/project-management/methodologies/waterfall#:~:text=The%20waterfall%20methodology%20is%20a,detailed%20documentation%2C%20and%20consecutive%20execution. Date of access: 13 May.Wrike. 2022. What is Waterfall project management? https://www.wrike.com/project-management-guide/faq/what-is-waterfall-project-management/ Date of access: 12 May.
The most used project management and software development methodologies in the South African ICT job marketS Boshoff Supervisor:	Prof Neels KrugerCo-supervisor:	Mr Ricus WarmenhovenStudent number:31775357Table of contentsList of TablesChapter 1  introductionIntroduction This article discusses the different software development methodologies currently being used in the ICT (Information and Communications Technology) industry. A literature review will be given about various software development methodologies, as well as case studies of four organisations within the ICT industry. The software development methodologies discussed are Waterfall and Agile, with five methodologies within the Agile structure.The organisations that will be discussed are 4Sight Holdings (BluESP), The Networkers, Retro Rabbit, and Netville. Interviews were held with employees of these organisations. The results will be analysed and discussed to determine the differences in project management and software development processes. This analysis will be used to determine the most used methodologies in the South African ICT market.Chapter 2  types of software development methodologiesLiterature review of software development methodologiesA software development methodology is a framework for organising, managing, and overseeing the creation of an information system (Sommerville (as cited by Bassil, 2012:1)).The administration of software development projects adheres to the fundamental principles of project management while also including specific aspects (Despa, 2014:37). A project manager for software development must cope with difficulties and obstacles unique to the IT sector.Additionally, there are advantages and strong points in software development that lessen the load of administration.WaterfallThe first approach that is recognised as being specifically for software development is waterfall (Despa, 2014:41). It places a focus on rigorous preparation and produces thorough documentation. The Waterfall technique is a sequential, linear process in which each stage begins only after the one before it has ended. Deliverables are specific to each level. The Waterfall technique emphasises meticulous software planning and design and is predictable. The Waterfall model essentially consists of the following five phases: analysis, design, implementation, testing, and maintenance (Bassil, 2012:2).Analysis phaseThe behaviour of the programme that has to be built is entirely and thoroughly described during the analysis phase (Bassil, 2012:2). To identify both functional and non-functional requirements, system and business analysts are involved. Usually, use cases - which explain how users interact with the software - are used to create the functional requirements. Included in them are specifications for the goal, scope, perspective, functions, software attributes, user characteristics, interface requirements, and database requirements.The non-functional requirements, on the other hand, refer to the numerous standards, limits, and requirements put on the development and operation of the programme as opposed to specific behaviours (Bassil, 2012:2). Reliability, scalability, testability, availability, maintainability, performance, and quality standards are some of its characteristics.Design phaseIt is the planning and issue-solving process for a software solution (Bassil, 2012:2). To describe the strategy for a solution, which comprises algorithm design, software architecture design, database conceptual schema and logical diagram design, concept design, graphical user interface design, and data structure definition, it involves software developers and designers.Implementation phaseThrough programming and deployment, it refers to the transformation of business needs and design specifications into a tangible executable programme, database, website, or software component (Bassil, 2012:2). The database and text files are developed during this stage, and the actual code is written and assembled into a usable programme. In other words, it is the process of transferring all of the specifications and plans into a real-world setting.Testing phaseThe process of ensuring that a software solution complies with the original requirements and specifications and serves the intended purpose is often referred to as verification and validation (Bassil, 2012:2). In reality, validation is the process of evaluating software during or after the development process to determine whether it satisfies specific requirements, whereas verification is the process of evaluating software to determine whether the products of a given development phase satisfy the conditions imposed at the start of that phase. Additionally, the testing stage is where debugging is carried out, in which problems and system malfunctions are identified, fixed, and improved as necessary.Maintenance phaseIt is the process of changing a software product after delivery and deployment to enhance performance and quality, polish output, and fix problems (Bassil, 2012:2). This stage also allows for the performance of additional maintenance tasks such as software environment adaptation, user need accommodation and software reliability improvement.AdvantagesBhuvaneswari and Prabaharan (2013:263) give the following advantages of the waterfall methodology:It is simple to comprehend and use.It strengthens constructive behaviours.It lists milestones and deliverables, motivated by document guidelines for published documents.Shylesh (2017:536) adds to these advantages:There is a distinct deliverable and evaluation procedure for each stage.Each phase is handled and finished separately.It works efficiently for small projects with clearly defined criteria.Disadvantages Shylesh (2017:536) give the following disadvantages of the waterfall methodology:Functional software only becomes available late in the cycle.There are several hazards.It is a subpar model for significant enterprises.It is not appropriate for projects with continuously changing needs.Phases make it difficult to gauge progress.It is unable to handle shifting needs.A project may be terminated by changing the scope during the process model.Agile Software engineering communities have been debating the topic of how software development should be structured to provide quicker, better, and more affordable solutions for decades (Dybå & Dingsøyr, 2008:834). Several solutions for improvement have been put up, including numerous practical tools, techniques, and practices, as well as the standardisation and measurement of the software development process. Many of the improvements were suggested by seasoned practitioners, who called their techniques "agile software development" (Dybå & Dingsøyr, 2008:834).Agile methods focus on people and their ingenuity rather than systems to solve the problem of an uncertain world (Dybå & Dingsøyr, 2008:834). Agile approaches were created to welcome, rather than reject, quicker rates of change since agile development is about feedback and change (Williams & Cockburn, 2003:39).The practitioners who introduced many of the agile development methodologies wrote the "agile manifesto" in 2001 (Dybå & Dingsøyr, 2008:834). According to the manifesto, agile development should prioritise four essential ideals (Fowler & Highsmith, 2001:29):Individuals and interactions are valued over processes and tools.Working software is valued over comprehensive documentation.Customer collaboration is valued over contract negotiation.Responding to change is valued over following a plan.There are several different agile development methods, including extreme programming, scrum, feature-driven development, lean development, and dynamic systems development method (Abrahamsson et al., 2017:20).Extreme programmingThe issues brought on by the lengthy development cycles of conventional development models gave rise to extreme programming (Abrahamsson et al., 2017:20-21). It first began as a straightforward chance to complete the task using procedures that had been shown to be efficient in software development processes throughout the previous decades.Extreme programming is characterised by continuous integration and automated testing, frequent minor releases that take into account ongoing customer input, and a collaborative approach (Bell, 2001:1). These characteristics make it an unusually adaptable and powerful method for developing software. Extreme Programming (XP), once seen as extreme, is quickly gaining acceptance as a methodology that works particularly well for small teams with ambiguous or dynamic requirements, which comprises the bulk of projects in the current fast-paced software development industry.Long projects are handled by XP by being divided into a series of independent, one- to three-week mini-projects (Bell, 2001:8). In between each repetition:customers choose which features to include,the functionalities are added by programmers to make the applications fully deployable,programmers and users build and maintain automated tests to prove that these functionalities exist, andprogrammers adapt the system’s design to elegantly accommodate all of its features.Practices Beck (1999:71) gives 13 practices that should be kept in mind during a project using XP:Planning game: customers use programmers' estimations to determine the size and timing of releases. only the functionality required by the tales in this iteration is implemented by programmers.Small releases: after a few months, the system is placed into operation before the entire issue is resolved. There are frequently new releases, ranging from daily to monthly.Metaphor: a metaphor or collection of metaphors that the client and programmers share to establish the design of the system.Simple design: the design always passes all tests, conveys all the programmers want to convey, has the fewest classes and functions feasible, and never duplicates any code. Tests: unit tests are created minute by minute by programmers. These evaluations are gathered, and they must all pass. In an iteration, customers provide functional tests for the stories. Although practically speaking, occasionally a financial judgement must be taken weighing the cost of delivering a known fault against the cost of delay, all of these tests should be done.Refactoring: through modifications to the current design that maintain all the tests running, the system's design evolves.Pair programming: two individuals utilise a single keyboard, mouse, and screen to write all production code.Continuous integration: within a few hours, new code is merged with the running system. The system is completely rebuilt during integration, and all tests must succeed for the modifications to be kept.Collective ownership: every programmer updates any code, anywhere in the system, whenever they perceive a chance to do so.On-site customer: a customer works permanently with the group.40-hour weeks: no one is permitted to put in a second straight week of overtime. Even occasional overtime utilised too regularly indicates more serious issues that need to be addressed.Open workspace: the staff works in a huge space with little cubicles around the walls. Just rules: you agree to adhere to the regulations when you join an Extreme team. But they are only guidelines. As long as everyone on the team concurs on how they will evaluate the consequences of the modification, the rules can be changed at any moment.Phases Beck (2000) also gives the following phases of XP:Exploration phase: The story cards that the customers want to be released in the initial release are written out during the exploration phase. Each story card outlines a software feature that will be added. The project team also becomes acquainted with the equipment, methods, and technologies they will be using during the project. By creating a prototype of the system, the technology that will be utilised will be evaluated and the architecture options for the system are studied. The length of the exploration phase varies from a few weeks to a few months, mostly dependent on how comfortable the programmers are with the technology.Planning phase: The stories are prioritised throughout the planning process, and the initial small release's material is decided. The timetable is established when the programmers determine how much work each narrative takes. The initial release timetable typically lasts no more than two months. It usually takes a few days to complete the planning stage.Iterations to release phase: Before the first release, the systems go through several iterations throughout the iterations to release phase. The planning stage timeline is divided into several iterations that will take one to four weeks to complete. The first iteration builds a system with the overall system's architecture. This is accomplished by choosing the stories that will cause the system's overall structure to be built. The stories chosen for each iteration are determined by the customer. After each cycle, the customer-created functional tests are executed. The system is ready for production after the most recent iteration.Productionising phase: Before the system can be deployed to the client, more testing and performance checks must be made during the productionising phase. New modifications might still be discovered at this stage, and a choice must be taken regarding whether to incorporate them in the current release. It may be necessary to shorten the iterations from three weeks to one week at this phase. The ideas and recommendations that were postponed are noted for subsequent adoption, maybe in the maintenance phase.Maintenance phase: The XP project must produce fresh iterations while simultaneously maintaining the system in production once the initial release is ready for client usage. The maintenance phase necessitates an effort for customer support duties to accomplish this. Thus, once the system is in production, the development pace may slow down. It could be necessary to add new team members and modify the team structure during the maintenance period.Death phase: When the client has no more stories to deploy, the death phase is about to begin. This necessitates that the system also fulfils the demands of the customer in other ways. Since there are no longer any modifications being made to the architecture, design, or code, this is the point in the XP process where the system's documentation is ultimately created. The system may potentially die if it fails to produce the required results or if it becomes too expensive to continue developing.CharacteristicsCohen et al. (2004:14) provide the following characteristics of XP:Team size: the size of the development team is restricted to the number of individuals who can fit in a single room, which is often agreed to be between 2 and 10. This is because the development team must be co-located.Iteration length: of the Agile Methods under consideration, XP has the shortest suggested iteration period, 2 weeks.Support for distributed teams: distributed teams are not encouraged by XP because of its emphasis on community and co-location.ScrumWhen Ken Schwaber initially introduced Scrum in 1996, he characterised it as a method that formalised the "do whatever it takes" approach and accepted the unpredictability of the software development process (Cohen et al., 2004:14). ProcessIterations (also known as sprints) for Scrum projects include the following (Cohen et al., 2004:14-16) (Highsmith & Highsmith, 2002:241-247):Pre-sprint planning: The "release backlog" is where all system work that has to be done is maintained. Features and functionality from the release backlog are chosen during pre-sprint planning and added to the "sprint backlog," which is a prioritised list of tasks to be finished during the following sprint. Pre-sprint planning additionally sets a Sprint Goal to remind developers why the tasks are being performed and at what degree of detail to execute them because the activities in the backlog are often at a higher level of abstraction.Sprint: After the pre-sprint preparation is finished, teams are given their sprint backlog and instructed to sprint to accomplish their goals. The sprint backlog's tasks are now frozen and cannot be changed for the rest of the sprint. Team members decide the projects they wish to work on and start the development process. Short daily meetings are essential to Scrum's success. Every morning, the team gathers for scrum meetings to improve communication, update management, customers, and developers on the project's status, pinpoint any issues, and keep everyone focused on the same objectives.Post-sprint meeting: A post-sprint meeting is held after each sprint to assess project advancement and present the existing system.Core valuesSchwaber (1996) provides an overview of Scrum's core values as follows:Small teams that focus on communication, efficiency, and the exchange of unwritten, unofficial information. adaptability to market (user/customer) or technological changes to guarantee the best product is generated.Adaptability to market (user/customer) or technological changes to guarantee the best product is generated.Frequently creating executables that can be examined, modified, tested, documented, and improved.Dividing up tasks and team responsibilities into tidy, low-coupling divisions or packages.Continuous testing and recording of a product as it is being created. The capability to declare something as finished anytime necessary.CharacteristicsCohen et al. (2004:16) provide the following characteristics of Scrum:Team size: teams of up to seven persons are formed from the development employees. A comprehensive team should at the very least consist of a developer, quality assurance engineer, and documenter.Iteration length: although Schwaber initially advocated sprint durations of 1 to 6 weeks, durations are often maintained at 4 weeks.Support for distributed teams: a project may consist of several teams that might easily be dispersed, even if Scrum's prescription does not specifically address distributed teams or offer built-in support.Feature-driven developmentJeff DeLuca and Peter Coad's partnership in the late 1990s gave rise to feature-driven development (Cohen et al., 2004:18). The Singapore Project served as their signature endeavour. To save a failing, extremely intricate loan system, DeLuca was hired. Over 3500 pages of documentation without any code were the result of the previous contractor's two-year effort. DeLuca began from scratch and used Coad to help with the object modelling. They created the feature-oriented development methodology, or FDD, by combining their prior expertise.This lightweight, model-driven method is designed to provide frequent, observable, and functional outcomes (Pang & Blair, 2004:86). These processes are simple to follow and agile due to their lightweight properties. Another noteworthy aspect of FDD is that it somewhat modifies the concept of "feature," referring to it as a client-valued functionality that can be built in two weeks or less.Core valuesHighsmith and Highsmith (2002:151) give FDD’s core values:To scale to larger projects, one needs a system for creating systems.The finest method is one that is clear-cut and straightforward.Each team member should be able to instantly see the reasoning behind each stage in the process."Process pride" may prevent the completion of the actual task.To free team members to concentrate on results, good processes fade into the background.The ideal lifecycles are brief, iterative, and feature-driven.ProcessWithin FDD, there are 5 processes (Pang & Blair, 2004:87) (Cohen et al., 2004:18), namely:Develop an overall model: creating a model is the first step in the FDD process. Members of the team and subject matter experts collaborate to construct a "walkthrough" version of the system.Build a features list: the team then decides on a group of features that best reflect the system. Features are insignificant objects that the client sees as useful. They resemble XP story cards that were created in a language that was accessible to everybody. The development of features should be completed within ten days. Sub-features are created for features that take more than 10 days to complete.Plan by feature: the priority feature list is then divided into "design packages," which are smaller subsections. A lead programmer is given authority for the design packages, while the other developers are given class ownership and responsibilities.Design by feature: following the assignment of design packages, the iterative phase of the process starts. A subset of features that will take one to two weeks to implement is chosen by the lead programmer. Build by feature: these features are then constructed, tested, and incorporated after more thorough planning.Characteristics Cohen et al. (2004:19) provide the following characteristics of FDD:Team size: the size of the team fluctuates according to how complicated the current feature is. DeLuca emphasises the value of elite personnel, particularly modelling professionals.Iteration length: no longer than two weeks.Support for distributed teams: despite not having built-in support for remote situations, FDD is intended for numerous teams and should be flexible.Lean developmentBob Charette founded Lean Development (LD), which is based on the 1980s success of Lean Manufacturing in the automotive sector (Cohen et al., 2004:19). While other Agile Methods aim to modify the development process, Charette contends that to be genuinely Agile, businesses must transform their top-down organisational structures. There is significant discussion over the distinction between LD and Agile Software Development (Cawley et al., 2010:32). Agile methodologies are seen by us as supporting practices for the Lean software development philosophy.PrinciplesCharette created the 12 LD principles, which are very similar to the Agile Manifesto (Highsmith & Highsmith, 2002:162-164):Satisfying the customer is the highest priority: the development team needs procedures for determining client priorities and for having others pay attention to their comments. Maximizing client satisfaction is the aim. Being unable to satisfy client expectations is seen as failing.Always provide the best value for money: software should provide customers with a new chance or assist them in resolving their issues at a fair price. The objective is value, not perfection. Value is the result of a product's features working together to satisfy a customer's demands at a certain time and cost.Success depends on active customer participation: a collaborative, team effort goes into active engagement. Customer involvement goes beyond simple "buy-in"; active involvement is crucial for change adaptation and making judgments about trade-offs in the present. Every LD project is a team effort: because variety is so important for creative, quick-cycle development, multidisciplinary teams are required rather than solitary people. The more varied a team is, the harder it is to foster an environment where they can bond.Everything is changeable: the foundation of rigorous development techniques is the elimination of modifications through the early definition of requirements, followed by the management of any changes that do manage to creep in. According to LD, learning to adapt to changes rather than attempting to control them is a preferable course of action because requirements will inevitably alter over time. What types of adjustments could take place is a subject that is always posed in an LD attempt. Domain, not point, solutions: most of the time, unique software is too pricey. Software that may be used by other firms, markets, and products distributes the cost and adds to the value equation. The concept of domain solutions sets LD apart.Complete, don’t construct: for the majority of application development teams, the buy rather than create strategy has long been an effective one. Enterprise resource planning system rollouts recently testified to this tendency. The idea also has a dimension of components and templates.An 80 per cent solution today instead of a 100 per cent solution tomorrow: markets are changing too quickly to offer complete solutions. Clients are usually always prepared to trade speed for functionality. Furthermore, research has indicated that more than 45% of a software application's capability is never used.Minimalism is essential: by reducing bureaucracy, keeping teams small and centralised, and maintaining a narrow focus on the product, LD aims to reduce waste.Needs determine technology: instead of choosing the technology first and subsequently the development goals, do the reverse. Because there are so many technological alternatives available today, it is simple to spend more time delivering business applications than changing technologies.Product growth is feature growth, not size growth: delivering change-tolerant features is the key to LD. The team should always evaluate how new features may affect business processes while reviewing them. The size of the product is not the problem.Never push LD beyond its limits: although LD is a framework motivated by a specific class of business challenges, it is not a magic solution.Dynamic systems developmentA formalisation of RAD (Rapid Application Development) approaches that emerged in the early to mid-1990s is the Dynamic Systems Development Method (DSDM) (Highsmith & Highsmith, 2002:138). DSDM was developed in England, has gained popularity in Europe, and is used by several sites in the United States. For many businesses, DSDM has proven to be a workable ASDE (Agile Software Development Ecosystem).Life cycleCohen et al. (2004:20-22) give the following stages in the DSDM life cycle:Pre-project: the pre-project phase certifies that the project is prepared to start, that finance is accessible, and that all necessary components are there for a successful project to start.Feasibility study: the feasibility study should only last a few weeks. DSDM's suitability for the project should be determined at this phase, along with the customary feasibility tasks.Business study: the business research phase emphasises strong teamwork and utilises a series of workshops run by skilled and empowered personnel who can swiftly pool their expertise and come to an understanding of the development's top priorities. The Business Area Definition, which identifies the users, markets, and business processes impacted by the system, is the phase's output.Functional model iteration: the iteration of the functional model tries to expand upon the high-level needs found in the business study. The DSDM framework creates a series of risk-based prototypes before evolving them into the final system. This phase shares a methodology with the design and construction phase.Design and build iteration: users receive a functioning system when the functional model prototypes have been finished, merged, and tested.Implementation: the system is put into service during this phase. During implementation, an Increment Review Document is created that explains the system's current status. Either all requirements are met and the system may be deemed full, or functionality is lacking. The functional model, design and build, and implementation phases are repeated until the system is finished if there is still work to be done on it.Post-project: this stage covers routine project clean-up and ongoing maintenance.PrinciplesAny DSDM implementation must adhere to the nine principles listed below; failing to do so will contradict the framework's guiding principles and dramatically raise project risks (Voigt et al., 2004:2). In contrast, some of the phases in the DSDM project structure may be ignored or changed to match a specific project layout.Active user involvement is imperative: the DSDM project guidelines advise working continuously with a small, select collection of users rather than in sporadic workshops or review sessions, as opposed to working with a wide group of users. Teams must be empowered to make decisions: transaction costs brought on by communication breakdowns between project participants and management need to be minimised if the project is to go forward as rapidly as feasible. Focus on frequent delivery: results are often delivered, ensuring that problems are rapidly identified, are simple to correct, and are closer to their source. Fitness for business is a criterion for accepted deliverables: as implied by the DSDM framework's name, its main goal is to provide software that is sufficient to address the business need without the need for additional improvements in a subsequent iteration.Iterative and incremental development is mandatory: the project's complexity has to be broken down into manageable feature packages, with each release adding new functionality until all of the business requirements are satisfied.All changes during development must be reversible: being adaptable necessitates that system configurations vary throughout the development of each increment as a result of shifting needs priority.Requirements are baselined at high-level: some high-level criteria need to be set to restrict how much flexibility requirements can have during the development process. This baseline, which should be seen as a requirements "freeze," is decided upon throughout the process' business study phase.Testing is integrated throughout the life cycle: testing is frequently requested throughout the design or implementation phase of the development process. Early testing is necessary for DSDM development. Collaborative and cooperative approach: during DSDM projects, it is imperative to prevent division and promote collaboration between technical personnel and business employees since cooperation is essential for a DSDM project to be successful.Chapter 3  case studiesCase studiesEmployees from the organisations mentioned below were interviewed regarding how COVID-19 had an impact on how the organisations changed and adapted to working in a remote environment. The employees interviewed have different roles within their organisations, namely, developers, a project manager, and a CTO.4Sight As a global, diversified technology company, its goal is to use its portfolio of 4IR technologies, human resources, and data-focused solutions to create, develop, implement, and expand solutions for its partners, which include both clients and vendors (4Sight, 2022).By utilising the goods and services offered by their Group, their partners may benefit from comprehensive digital transformation solutions across a variety of industrial verticals thanks to their business model (4Sight, 2022). An intentional "blue ocean" approach, consisting of the following:Continuous innovationFostering partnershipsManaging the move to OPEX modelsUnique bespoke business solutionsSoftware-as-a-service and annuity business modelsBuilding the modern digital enterprise of the futureEmbracing the modern digital economyThe NetworkersThey are the best at comprehending how technology benefits humans (The Networkers, 2022). Systems for robust, secure, and stable networks promote interpersonal interaction and collaboration. All of their thoughts and deeds are driven by their client's desires, requirements, and preferences. They assist Their clients with difficult IT problems by thinking like them. Focus is key in this situation, and networking and security constitute their chosen "branch of sport".Retro RabbitRetro Rabbit creates outstanding software (Retro Rabbit, 2022). They provide specialised solutions that foster brilliance and creativity. They produce innovative products and provide clients with the most comprehensive information technology design solution by fusing data science, human-centred design, and the most recent software development methodologies.They are the epitome of agile development, working directly with their clients to build a solution that will meet the needs of the users and is backed by their team of skilled professionals (Retro Rabbit, 2022). Their specialities include game creation, experience design, cloud computing, artificial intelligence, and mobile and web development. From engineering to big data to financial services, they have experience in every industry. NetvilleNetville offers the best, most reliable IT solutions to businesses of all sizes (Netville, 2022). They think that businesses need trustworthy allies who can help them navigate the difficulties brought on by technological advancement in the rapidly changing technology sector. They provide services in the cloud, security, and mobility, to mention a few. Netville is run by one person, who does consultation work for other businesses.Chapter 4  comparison of case studiesComparison of case studiesTable 4-1 provides a comparison of the case studies. The results of the interviews will be provided in chapter 5.Table 41:	Comparison of case studieschapter 5  reflection and conclusionReflection and conclusion of the case studiesSoftware development methodology and project management methodologyFrom the interviews conducted it seems that the most used software development methodology is Agile, specifically Scrum and the most used project management methodology is Agile. It seems that the methodology chosen depends on the size of the company and the project being worked on.Three of the four companies said that there is no separation of function and duty between project management methodologies and software development methodologies, one of which uses Agile for both methodologies, and another using a more structured approach to project management.Two of the four companies said that they believe COVID-19 had a positive impact on the way software development was conducted, both of which follow the Agile approach. While everyone said that COVID-19 had a positive impact on organisational productivity, only two interviewees said that it had a positive impact on project management productivity. Only the developer interviewees stated that COVID-19 had a positive impact on software development success.Three of the five interviewees stated that they believe COVID-19 had the biggest impact on people within software development and project management. Both interviewees that disagreed with that statement are in managerial positions.Four of the five interviewees stated that COVID-19 had a significant impact on the processes followed and the technology used within the project development and management team. They also stated that it had an impact on the governance and strategy within the organisations. The interviewee that disagreed with those statements is a sole proprietor and does not follow any project management or software development methodology. Impact of COVID-19 on the work environmentEveryone said that working in an online environment has been a positive experience. All four companies said they mostly worked on-site before COVID-19, remotely during COVID-19, and remotely after COVID-19. They all had to use their own devices (such as internet connection and computers or laptops). As well as with their indications of how the technologies they used changed, most companies are well equipped to do most work remotely, instead of going into the office every day.Impact of COVID-19 on communication Three of the five interviewees stated that they could collaborate effectively with other teams and that communication is easy in an online environment. One of the interviewees that disagreed with the statements follows a pure Agile approach to both project management and software development, which is reasonable considering Agile relies heavily on communication.ConclusionBecause of the changes that organisations adapted to during COVID-19, communication in an online environment has become easier to manage and is still being improved upon. Various technologies, such as Microsoft Teams, have been implemented in organisations to make online communication easier. The ease at which teams can communicate with each other affects the main methodologies followed during projects. The fact that all of the interviewees work remotely even after it is not necessary anymore suggests that organisations have found effective means to communicate effectively with team members. Considering the results of the interviews and the state of the world after COVID-19, any software development methodology can be followed so long as the teams have a means to effective communication, although the most used methodology is Agile, as it is very flexible and adaptable. Team members don’t need to be face-to-face during meetings for effective communication, thus Agile is the best methodology to use in the current economic climate.The project management methodology used depends on the size of the organisation and the type of projects they do. The bigger organisations use more structured methodologies such as Prince2 and PMBoK, while the smaller organisations use less structured methodologies such as Agile.references4Sight. 2022. 4sight holdings: About.  Date of access: 11 Oct. 2022.Abrahamsson, P., Salo, O., Ronkainen, J. & Warsta, J. 2017. Agile software development methods: Review and analysis. Bassil, Y. 2012. A simulation model for the Waterfall software development life cycle. International Journal of Engineering & Technology, 2(5),  Beck, K. 1999. Embracing change with extreme programming. Computer, 32(10):70-77. Beck, K. 2000. Extreme programming explained: Embrace change. Addison-Wesley Professional.Bell, J.T. 2001. Extreme programming. Bhuvaneswari, T. & Prabaharan, S. 2013. A survey on software development life cycle models. International Journal of Computer Science and Mobile Computing, 2(5):262-267. Cawley, O., Wang, X. & Richardson, I. 2010. Lean/agile software development methodologies in regulated environments–state of the art. In. International Conference on Lean Enterprise Software and Systems. Springer. pp. 31-36.Cohen, D., Lindvall, M. & Costa, P. 2004. An introduction to agile methods. Adv. Comput., 62(03):1-66. Despa, M.L. 2014. Comparative study on software development methodologies. Database Systems Journal, 5(3):37-56. Dybå, T. & Dingsøyr, T. 2008. Empirical studies of agile software development: A systematic review. Information and software technology, 50(9-10):833-859. Fowler, M. & Highsmith, J. 2001. The agile manifesto. Software development, 9(8):28-35. Highsmith, J.A. & Highsmith, J. 2002. Agile software development ecosystems. Addison-Wesley Professional.Netville. 2022. About netville.  Date of access: 16 Oct. 2022.Pang, J. & Blair, L. 2004. Refining feature driven development-a methodology for early aspects. Early Aspects: Aspect-Oriented Requirements Engineering and Architecture Design, 86, Retro Rabbit. 2022. Retro rabbit: About.  Date of access: 11 Oct. 2022.Schwaber, K. 1996. Controlled chaos: Living on the edge. Cutter IT Journal, 9(4):X-16-16.  Shylesh, S. 2017. A study of software development life cycle process models. In. National Conference on Reinventing Opportunities in Management, IT, and Social Sciences. pp. 534-541.Sommerville, I. 2011. Software engineering. 9th. Addison-Wesley.The Networkers. 2022. The networkers.  Date of access: 13 Oct. 2022.Voigt, B.J., Glinz, M. & Seybold, C. 2004. Dynamic system development method. Zurich: University of Zurich. Williams, L. & Cockburn, A. 2003. Guest editors' introduction: Agile software development: It? S about feedback and change. Computer, 36(06):39-43.
Planning a technical architecture for a micro-enterpriseS Boshoff Supervisor:	Mrs. S.E.S CampherGraduation: Student number: 31775357abstractIn this study, the different options that a micro-enterprise has for an information technology (IT) architecture will be investigated. This will be done by using a case study of the Instrument-makers on the North-West University Potchefstroom campus. The world becomes more digital every year and as a result, more businesses have to adapt to become more digital. Enterprise architecture helps them with digitization. There is no commonly accepted architectural approach or representation among scholars and practitioners, but the five frameworks most commonly used are business architecture, information architecture, software architecture and technical architecture. In this study, the researcher investigates the enterprise and IT architecture and its components to find the most suitable technology architecture for a micro-enterprise. An artefact is developed in the form of a technical architecture using various methods and models that are discussed. The researcher followed the Design Science Research methodology.abstrakIn hierdie studie sal die verskillende opsies wat 'n mikro-onderneming vir 'n inligtingstegnologie (IT) argitektuur het, ondersoek word. Dit sal gedoen word deur gebruik te maak van 'n gevallestudie van die Instrument-makers te Noordwes-Universiteit Potchefstroom kampus. Die wêreld word elke jaar meer digitaal en gevolglik moet meer besighede aanpas om by te bly met die veranderinge. Ondernemingsargitektuur help hulle met digitalisering. Daar is geen algemeen aanvaarde argitektoniese benadering of voorstelling onder vakkundiges en praktisyns nie, maar die vyf raamwerke wat die meeste gebruik word, is besigheids argitektuur, inligtings argitektuur, sagteware argitektuur en tegniese argitektuur. In hierdie studie ondersoek die navorser die onderneming en IT argitektuur en hul komponente om die mees geskikte tegnologie argitektuur vir 'n mikro-onderneming te vind. 'n Artefak word ontwikkel in die vorm van 'n tegniese argitektuur deur gebruik te maak van verskeie metodes en modelle wat bespreek word. Die navorser het die ‘Design Science Research’ metodologie gevolg.Table of contentsList of TablesList of Figures Chapter 1  introductionProject descriptionIn this study, the different options that a micro-enterprise has for an information technology (IT) architecture will be investigated. Different solutions for each of the components in the IT architecture will be discussed and compared in terms of their cost, ease of use, advantages, and disadvantages. This will be done by using a case study. The Instrument-makers on the North-West University (NWU) Potchefstroom Campus do not have an IT architecture. The head of the business, Mr Thys Taljaard, has asked for advice to implement an architecture that will make their day-to-day operations more effective. The formal definition of a micro-enterprise in South Africa published in the Government Gazette is a business with zero to ten full-time employees, and an annual total turnover of less than or equal to R10 million (Department of Small Business Development, 2019:111). The Instrument-makers fall within this category but due to the lack of studies on micro-enterprises, this study will be done from the perspective of small and medium enterprises.An artefact will be developed that will provide an architectural framework that meets all the business requirements.The researcher will provide background on the existing studies of IT architecture frameworks for small businesses, give a description of the project, and discuss the case study that will be used in this chapter. Problem description and backgroundBackground to studyThe world becomes more digital every year and as a result, more businesses have to adapt to become more digital (Hafsi & Assar, 2016). Enterprise architecture (EA) helps them do that. EA has a lot of benefits such as creating transparency in the business’s state of operations to improve business processes and overall efficiency (Goerzig & Bauernhansl, 2018). These benefits can improve an SME’s business operations to be able to compete with bigger enterprises.According to Tang et al. (2004), there is no commonly accepted architectural approach or representation among scholars and practitioners. The five frameworks most commonly used are business architecture, information architecture, software architecture and technical architecture. Figure 2.1 shows the structure of the enterprise architecture, the IT architecture, and the technology architecture.In this study, the enterprise and IT architecture and their components will be investigated to find the most suitable technology architecture for a micro-enterprise. A decision matrix will be given to Mr Taljaard to determine what the strategic objective of the business is, and what the most important business capabilities, business processes, and functional capabilities are. During the study, it will be determined whether these components are good measures to be used when creating an architectural framework.Bernaert et al. (2014) discuss the suggested method for bridging the gap between SMEs and enterprise architecture (EA) by presenting five adoption models for EA implementation in SMEs, namely the Technology Acceptance Model (TAM), the Method Evaluation Model, and Methodological Pragmatism. The TAM’s goal is to provide a general explanation of the factors that influence computer adoption that can be applied to a wide range of end computing technology and user demographics while also being cost-effective and logically justifiable (Davis et al., 1989:985). According to Rescher (cited by Bernaert et al. (2014:83)), Methodological Pragmatism holds that procedures have simply a pragmatic utility, not truth value. A technique cannot be true or untrue since it does not describe any external reality; it can only be successful or ineffective (Bernaert et al., 2014:83). For assessing information system design methodologies, Moody (2003) provided a theoretical model and related measuring instrument based on TAM and Methodological Pragmatism called the Method Evaluation Model.Haddara et al. (2022) describe the challenges that SMEs face when adopting cloud enterprise resource planning (ERP) systems. Some of the challenges mentioned by Haddara et al. (2022) are the following: Existing cloud-ERP systems are limited in their customisation ability to suit the business requirements,data integration as most business’ data structures do not fit with the cloud-ERP systems – this leads to data loss and data inaccuracy,there is not sufficient training involved when implementing a cloud-ERP system, anddata security risks.Drake and Turner (2022) discuss several different cloud databases available to use, namely Microsoft Azure SQL Database, Amazon Relational Database Service, Google Cloud SQL, IBM Db2 on Cloud, and Oracle. Their ease of use, pricing, advantages and disadvantages are debated.These literature studies will be discussed in more detail in chapter 2.Based on the research material consulted, it seems that most studies investigate implementation methods of EAs in SMEs. There are very few studies that investigate the components of each of the architectures within the EA model. This study will investigate the technology architecture components most suited for the micro-enterprise used in the case study.Problem descriptionThe Instrument-makers on the NWU Potchefstroom Campus have an administration system with a database. The system is not currently in use due to it not working correctly. The system is a desktop application and the database is hosted and maintained by the IT services on campus. The head of the department has asked for advice on how to manage this system in terms of IT architecture. The current architecture consists of using the NWU server for file sharing, data storage, and electronic messaging. The NWU server that the Instrument-makers use is located on the Potchefstroom Campus. It is managed by the IT services on campus. Mr Taljaard has expressed challenges with this environment as the IT services on campus are too busy to help with the problems that arise. The advantage of the current architecture is that IT professionals manage the server and the database used in the administration system. Implementing cloud services could make their architecture partially independent of NWU’s IT services. Should Mr Taljaard choose to implement cloud services, the database used for the administration system and the system itself will be hosted in the cloud and will not be maintained by the NWU. The disadvantage of this might be added costs, and the lack of technical support should the need arise.This study will investigate the most suitable IT architecture framework that will meet all the requirements set out by Mr Taljaard. This will be done by considering the components within the enterprise architecture and determining what the most suitable architectures for these components are and how they will influence the technical architecture that will be created for this business. The technical architecture will be represented by a diagram.Research questionHow do you consider components of an enterprise architecture to plan a technical architecture for a micro-enterprise?Aims and objectivesResearch aimThis study aims to determine the best technical architecture to be used in the micro-enterprise identified in the case study. The study will investigate different components and architectures in the enterprise architecture while referring to the requirements set out by Mr Taljaard to determine the most suitable technical architecture.Research objectivesInvestigate different existing architectures to determine the most cost-effective and user-friendly option for a micro-enterprise.Present the options to Mr Taljaard so that an architecture can be chosen.Investigate the user-friendliness of the chosen architecture to ensure that the end-users are comfortable using it.Determine whether or not the end-users will need training on how to use the architecture.Implement the architecture and determine the success thereof.Procedures and methods that will be usedParadigmatic perspectiveThis study will make use of design science research (DSR) as a paradigm and a research methodology. Hevner and Chatterjee (2010) describe DSR as a research paradigm wherein a designer creates inventive artefacts to address concerns about human issues and further state that the developed artefacts are both helpful and essential to comprehending that issue. Hevner et al. (2004), March and Smith (1995), and Walls et al. (1992) all agree that DSR is a research paradigm. Research methodologyThe research methodology that will be used in this study is the design science research methodology described by Hevner et al. (2004) and Peffers et al. (2007). Hevner et al. (2004) stated 7 guidelines to be followed when using the DSR methodology, while Peffers et al. (2007) stated the process to be followed when using the methodology. The guidelines to be followed are the following: design as an artefact, problem relevance, design evaluation, research contributions, research rigour, design as a search process, and communication of research (Hevner et al., 2004:83). A well-understood business problem should be used to develop a useful and meaningful artefact that will solve the problem (Hevner et al., 2004:82-84). After developing an artefact, its utility, quality, and efficacy must be thoroughly proved through well-executed assessment techniques and must contribute to existing research in the applicable areas (Hevner et al., 2004:85-87). In both the development and assessment of the intended artefact, DSR necessitates the use of rigorous techniques (Hevner et al., 2004:87). Deciding on an effective artefact is often iterative and requires the abstraction and representation of acceptable methods, purposes, and rules (Hevner et al., 2004:88). When the artefact has been developed it must be presented to the relevant audiences (Hevner et al., 2004:90).The process to be followed is a nominal process sequence: identify the problem and provide motivation, define the objectives of a viable solution, design and develop an artefact, demonstrate the artefact, evaluate the effectiveness of the artefact, and communicate the results (Peffers et al., 2007:54). This process will be followed throughout this study.The artefact that will be developed is an architectural framework that is most suited to the business requirements. Approach to project management and project planScopeThe artefact will be a technical architectural framework, consisting of a software and services architecture, an integration architecture, a physical data architecture, an infrastructure and network architecture, a security architecture, and a development and operations architecture. Within these architectures are several components, namely: software components, integration platforms, data, infrastructure/cloud, security capabilities, and development and operations capabilities. This framework will be implemented within the business whereafter an evaluation will be done to determine whether the architecture is useful.The business processes that will be considered to develop the architecture are the administration process, inventory management, and employee management.LimitationsThe limitations when implementing the artefact will be financial. The best solution might not fall within the Instrument-makers’ budget. They will choose the solution most feasible for them.Risk analysisPossible risks when implementing the artefact:Data loss: when transferring data to a new platform, data loss or data corruption could occur.Data theft: if the most effective solution is to use the cloud, data theft could occur if the database is hacked.Steps to be taken to mitigate the risks:Data loss: most platforms that will be considered when developing the artefact have sufficient protocols for transferring data successfully. Should something go wrong, backups of the data will be available to use.Data theft: to prevent data theft, the architecture will be developed to be secure with applicable encryption.Project planEthical considerationsAny sensitive data that might be presented to the researcher during this research project will not be distributed or shared with anyone not related to the project. Measures will be taken to ensure the data and system that will be implemented will be safe and secure. Provisional chapter divisionChapter 1: guidelines for project planning and research proposalThis chapter provides a brief description of what the project is about and what it involves, a background of existing literature relevant to the study, a problem description and background of the problem, a discussion of the research paradigm and methods that will be used, the aims and objectives of the project, the research methodology that will be followed, the rigour and validity that will answer the research question, the ethical and legal implications that the study has, and the approach to project management with a project plan.Chapter 2: literature study on existing architectures and methods to create an architectureThis chapter will provide a brief project description, a problem description and background of the problem, the aims and objectives of the project, and a literature review of existing literature relevant to the study.Chapter 3: development of the artefact and the artefact documentationThis chapter will describe the artefact, the life cycle followed, and a description of the development of the artefact.Chapter 4: resultsThis chapter will provide the results of the effectiveness of the artefact after it has been implemented.Chapter 5: reflectionThis chapter will reflect on the project by the researcher.Chapter 2  literature reviewIntroductionTo create a technical architecture, it is important to consider the enterprise architecture as a whole, to understand what each component does and how the components work together. This literature review contains an overview of enterprise architecture, how it relates to small businesses, the international standard for enterprise architecture, and existing solutions that are available. The following sections will be discussed in this chapter:Architecture and enterprise architecture to state exactly what enterprise architecture is,How to bridge the gap between small and medium enterprises and enterprise architecture, to provide an approach to developing an architecture, Architecture frameworks that will be used to develop the architecture, Methods that can be used to develop an architecture framework, andA comparison of a cloud versus on site architecture.Architecture and enterprise architectureThe ISO/IEC/IEEE 42010:2011 standard is the internationally accepted standard for information systems. It defines the term architecture as “fundamental concepts or properties of a system in its environment embodied in its elements, relationships, and in the principles of its design and evolution” (ISO & IEC, 2011:2). Lankhorst (2009:2) compares the architecture of an information system in an organisation to the architecture blueprints used to design and build a building. The frame of reference when designing an architecture for a building is similar to what is needed when designing an architecture for an enterprise. The Open Group Architecture Framework (TOGAF) is an internationally recognised framework for designing architectures within organisations (The Open Group, 2018:xix). TOGAF will be discussed in more detail in section 2.4. The Open Group (2018:6) provides the following definition for an enterprise: “any collection of organizations that have common goals.” Combining what architecture and an enterprise are, the following definition can be given to enterprise architecture (Lankhorst, 2009:3): “a coherent whole of principles, methods, and models that are used in the design and realisation of an enterprise’s organisational structure, business processes, information systems, and infrastructure.”Business performance can be improved by allowing organisations to understand themselves holistically and integratedly in terms of their business processes, strategic direction, technological resources, and information flows through the use of enterprise architecture, a management and technology approach (Bernard, 2012:23). A company may manage the changeover from the present to the future operational states by creating current and future versions of this integrated view (Bernard, 2012:23).Bridging the gap between small and medium enterprises and enterprise architectureBernaert et al. (2014) provide three adoption models to use when implementing EA in SMEs, namely the Technology Acceptance Model (TAM), the Method Evaluation Model, and Methodological Pragmatism. Davis et al. (1989) introduced the TAM as a measurement scale for forecasting the user acceptance of technology, using perceived ease of use and perceived usefulness. Studies conducted by Davis et al. (1989) show that users prefer an application that provides the exact functionality they desire over ease of use, which is still true today as proven by studies by Sheppard and Vibert (2019). These studies show the importance of an application adhering to a user’s functional requirements. The application should be made to do exactly what a user requires. The functional capabilities of an EA are therefore very important when planning the technical architecture, as each component within the technical architecture should take the functional capabilities into account.Methodological Pragmatism assumes that a method is either effective or ineffective, it cannot be correct or wrong (Bernaert et al., 2014:83). All methods are intended to increase a task’s performance by improving the efficiency and effectiveness of the task. The efficiency can be improved by reducing inputs, and the effectiveness by improving the outputs.Moody (2003) created a theoretical model and related measuring instrument based on TAM and Methodological Pragmatism that evaluates methods based on certain constructs: actual efficiency, actual effectiveness, perceived ease of use, perceived usefulness, intention to use, and actual usage. This evaluation method is called the Method Evaluation Model. Using the TAM and the Method Evaluation Model, EA can be adopted by SMEs by performing three tasks: increasing the perceived usefulness, increasing the perceived ease of use, and making sure the actual efficacy influences the perceived efficacy. Actual efficacy has an impact on perceived usefulness, and actual efficiency has an impact on perceived ease of use (Bernaert et al., 2014:86). TAM’s scale may be used to evaluate perceived usefulness and perceived ease of use. Developing EA techniques should be implemented and tested to improve the techniques (Bernaert et al., 2014:87). If the actual efficacy meets the user’s standards, the perceived usefulness will increase as the user will spread the positive impact EA has on SMEs.The Open Group Architecture Framework (TOGAF)TOGAF is a widely accepted framework for creating organisational architectures (The Open Group, 2018:xix). The TOGAF document is divided into five parts: the Architecture Development Method (ADM), ADM guidelines and techniques, the Architecture Content Framework, the Enterprise continuum and tools, and the Architecture Capability Framework (The Open Group, 2018:5). The TOGAF Standard supports the following common architecture domains: business architecture, data architecture, application architecture, and technology architecture (The Open Group, 2018:11-12).Enterprise architecture principlesPrinciples are broad rules and guidelines that inform and support how an organisation approaches achieving its objective (The Open Group, 2018:197). They are meant to be durable and rarely changed. Principles may be simply one component of an organised collection of concepts that serve to define and guide the organisation collectively, including its values, activities, and outcomes. Principles may be created at various levels and within various areas, depending on the organisation.The creation and application of architecture are influenced by two important domains (The Open Group, 2018:197):Enterprise principles offer a foundation for corporate decision-making and guide the organization's approach to achieving its purpose.Architecture principles are a collection of rules that govern how architecture operates.Common architecture principlesA rigid architecture may become less flexible if there are too many principles (The Open Group, 2018:201). Many companies prefer to keep the number of principles to between 10 and 20 and to only designate high-level ones.The following are common principles used in organisations when developing an architecture:Business principles (The Open Group, 2018:201-204):Primacy of principles: all enterprises within the organization must adhere to these information management guidelines.Maximise benefit to the enterprise: the enterprise as a whole is considered while making information management decisions to maximise benefits.Information management is everybody’s business: the enterprise as a whole participates in information management choices necessary to achieve business objectives.Business continuity: despite system outages, business activities are kept up.Common use applications: it is preferable to create enterprise-wide apps rather than create identical or redundant applications that are only offered to one entity.Service orientation: the architecture is centred on the creation of services that are designed to reflect the actual business operations that make up enterprise business processes.Compliance with law: processes for enterprise information management abide by all applicable laws, rules, and regulations.Information technology (IT) responsibility: ownership and implementation of IT infrastructure and processes that enables solutions to satisfy user-defined objectives for service levels, functionality, delivery schedules, and pricing within the scope of the IT organisation.Protection of intellectual property: intellectual property (IP) belonging to the business must be safeguarded. The IT architecture, implementation, and governance procedures must reflect this protection.Data principles (The Open Group, 2018:205-209):Data is an asset: data is an asset that the organisation values and is managed as such.Data is shared: users have access to the information they need to carry out their tasks, thus data is exchanged throughout business departments and organisations.Data is accessible: users can obtain data to carry out their tasks.Data trustee: A trustee is in charge of each data element's accuracy.Common vocabulary and data definitions: the definitions of data are available to all users and are uniform across the whole organisation.Data security: data is secured from misuse and disclosure by unauthorised parties. This includes, but is not limited to, the protection of pre-decisional, sensitive, source selection-sensitive, and proprietary information in addition to the conventional features of national security classification.Application principles (The Open Group, 2018:209-210):Technology independence: applications may run on a range of technology platforms since they are independent of particular technological decisions.Ease-of-use: utilising applications is simple. Users are unaware of the underlying technology, allowing them to focus on their current work.Technology principles (The Open Group, 2018:210-212):Requirements-based change: applications and technological advancements are only produced in response to business requirements.Responsive change management: enterprise information environment modifications are applied promptly.Control technical diversity: to keep the non-trivial cost of keeping knowledge of and communication across various processing environments to a minimum, technological variety is regulated.Interoperability: Standards that support data, application, and technological interoperability should be adhered to by software and hardware.Architecture development method (ADM)A tried-and-true approach for developing architectures is provided by the ADM that establishes an architectural framework, creates architecture content, transitions, and controls how architectures are realised (The Open Group, 2018:12). All of these tasks are completed as part of an iterative cycle for the continual creation and realisation of architecture, which enables companies to alter their businesses in a controlled way in response to opportunities and goals for the company. There are ten phases within the ADM (The Open Group, 2018:12):The preliminary phase outlines the preparatory and initiatory steps necessary to develop an architecture capability, such as customising the TOGAF framework and defining the architecture principles.Architecture vision: The first stage of an architectural development cycle is described by this phase. It contains details on defining the project's scope, naming the parties involved, developing the architectural vision, and obtaining consent to continue the development of the architecture.Business architecture: illustrates how the agreed-upon architecture concept is supported by the development of business architecture.Information systems architecture: illustrates how a system architecture for information systems is created to support the agreed-upon architecture goal.Technology architecture: describes the process used to create a technological architecture that supports the agreed-upon architecture goal.Opportunities and solutions: identify delivery vehicles and carries out early implementation planning for the architecture that was developed in the earlier phases.Migration planning: by completing a thorough Implementation and Migration Plan, this phase addresses how to transition from the Baseline to the Target Architectures.Implementation governance: gives an architectural review on the execution.Architecture change management: creates guidelines for managing the transition to the new architecture.Requirements management: explores how architecture needs are managed across the ADM.Architecture content frameworkAs a result of their work, architects implementing the ADM will create a variety of outputs (The Open Group, 2018:13). Major work products may be created, organised, and presented consistently thanks to the TOGAF Architecture Content Framework, which offers a structural model for architectural content. The three categories listed below are used by the Architecture Content Framework to categorise different types of architectural work products according to their intended use: A contractually necessary item of work is known as a delivery and is afterwards officially approved by the stakeholders.An artefact is a piece of architectural work that explains a particular feature of architecture.When integrated with additional building blocks to create designs and solutions, a building block represents a (perhaps reusable) component of corporate capabilities.Enterprise continuumThe Enterprise Continuum idea is part of the TOGAF standard and illustrates how generic solutions may be used and tailored to meet the needs of a specific business (The Open Group, 2018:15). It also provides a larger perspective for architects. As foundation architectures transition from being general to being organization-specific, the Enterprise Continuum, a perspective of the Architectural Repository, offers techniques for categorising architecture and solution artefacts. The Architecture Continuum and the Solutions Continuum are two complementary ideas that make up the Enterprise Continuum.Architecture repositoryThe idea of an architecture repository, developed by the ADM and capable of storing different types of architectural output at different abstraction levels, supports the enterprise continuum (The Open Group, 2018:15). The TOGAF standard helps stakeholders and practitioners at all levels communicate and work together in this way.The following are the main elements of an architecture repository (The Open Group, 2018:17):The Architectural Metamodel, which also includes a metamodel for architecture content, illustrates how an architecture framework might be used organisationally.The criteria, procedures and structures that support the Architecture Repository's governance are defined by the Architecture Capability.The architecture landscape is a visual depiction of the assets that are currently distributed across the active company. To achieve different design goals, the landscape is likely to occur at many different levels of abstraction.The standards that new architectures must adhere to are recorded in the Standards Information Base, which may comprise industry standards, carefully chosen goods and services from vendors, or shared services that have previously been implemented inside the business.The Reference Library offers standards, templates, patterns, and other types of reference content that may be used to hasten the development of new corporate architectures.The Governance Log keeps track of governance activity throughout the company.All permitted architectural needs that have been approved by the Architecture Board are visible in the Architecture Requirements Repository.The SBBs that the company has planned or implemented to support the Architecture Landscape are represented architecturally in the Solutions Landscape.Cloud versus on siteA business has two options for data storage: cloud storage or on-site storage. There are advantages and disadvantages to both. A business should weigh each carefully to decide which to use. Below is a comparison of cloud storage and on-site storage with eight factors that should be considered when choosing which type of storage to implement (Diamond, 2020):Table 21 Comparison of cloud storage and on-site storageA study by Fisher (2018) and Jiyi Wu et al. (2010) justifies these comparisons. Fisher states that an on-premise server is more suitable for larger enterprises that can afford an IT team to manage and maintain it, while cloud computing is more suitable for smaller enterprises that do not have the resources (Fisher, 2018:2004).Cloud storage solutionsUsers of cloud computing may store their data on remote drives and access it from any location at any time (Jiyi Wu et al., 2010:381). For the maintenance of users' data and information, cloud storage systems are expected to adhere to a number of strict standards, including high availability, dependability, replication, data consistency, and performance. There are various options, and in addition to traditional remote access protocols or hosting for virtual or physical servers, many traditional hosted or managed service providers also provide block or file storage.Traditional hosted storage, such as services accessed through FTP, WebDAV, NFS/CIFS, or block protocols, is included in cloud storage (Jiyi Wu et al., 2010:381). These services can also be accessed locally or remotely from a hosted environment. This hosted storage solution has evolved into cloud storage, which encapsulates storage with more advanced namespaces, APIs, file or data location virtualization, and management tools.Cloud storage is a cloud computing approach that preserves data on the Internet and is provided by a cloud computing provider who manages and executes data storage as a service (AWS, 2022). Because it is available on demand with just-in-time capacity and price, there is no need to own and maintain your own data storage infrastructure. You get flexibility, durability, and "anytime, anywhere" data access as a result.Cloud storage is offered for sale by a third-party cloud provider; it is their property and operation, and it is distributed through the Internet in accordance with a pay-as-you-go business model (AWS, 2022). The volume, security, and durability of your data are managed by these cloud storage providers so that it is available to your applications from anywhere in the world with Internet access. Applications can directly access cloud storage using an API or through traditional storage protocols. Several businesses provide supplementary services in order to collect, handle, safeguard, and analyse data at scale.There is no need to spend money on hardware, storage, or potential future uses that might not occur with cloud storage (AWS, 2022). Users may add or remove capacity as needed, change performance and retention factors instantaneously, and only pay for storage that they really use. By automatically transferring less-used data to lower cost levels in accordance with auditable norms, even greater efficiencies can be attained.Types of cloud storage (AWS, 2022):Object storage: The enormous scalability and metadata features of object storage are frequently utilised by applications created on the cloud. Object storage options like Amazon Simple Storage Service (S3) are excellent for developing scale-and-flexibility-required modern applications from the ground up. They may also be used to import pre-existing data stores for analytics, backup, or archiving purposes.Block storage: Dedicated, low latency storage is frequently needed for each host by other enterprise applications like databases or ERP systems. This is comparable to a Storage Area Network (SAN) or direct-attached storage (DAS) (SAN). Each virtual server has choices for block-based cloud storage like Amazon Elastic Block Store (EBS), that offers the incredibly low latency required for high-performance applications.Chapter 3  development of artefactDescription of artefactThe artefact created is the technical architecture of a Microsoft Power Apps solution for the Instrument-makers. A canvas app is a business application designed and built from a canvas in Microsoft Power Apps without using a conventional programming language to write the code (Microsoft, 2022a). The app follows a data-first approach, with the data sources being SharePoint lists. A list is a collection of data similar to a database table without the complexity of, for example, relationships and constraints (Schloemmer, 2020). Figure 3-1 is the graphical representation of the artefact.As a component of Microsoft Entra, Azure Active Directory (Azure AD) is a business identity service that offers single sign-on, multifactor authentication, and conditional access to protect against 99.9% of cyberattacks (Microsoft, 2022b). It contains user information of every staff member and student at the North-West University, as well as their security roles. This layer provides the basis for the security of the canvas app.The next layer consists of Microsoft SharePoint and Microsoft Power Platform. Microsoft SharePoint is a website creation tool used by businesses (Microsoft, 2022c). It serves as a safe location where you may store, arrange, share, and access data from any device. With the help of the robust apps on the Microsoft Power Platform, you can automate procedures, develop solutions, perform data analysis, and build virtual agents (Paracha, 2021).The third layer consists of Microsoft Office365, Microsoft Teams, Microsoft Power Apps, Microsoft Power Automate, and Microsoft Power BI. Reports can be created of the data in the lists by exporting them into Excel or Power BI. This provides the user with essential information to make business decisions. Architecture development lifecycleThe life cycle followed during the development of the artefact is the Architecture Development Life Cycle (ADLC). The steps that architecture goes through from its conception through its decommissioning are known as the architecture lifecycle, or Architecture Development Life Cycle (ADLC) (BTABoK, 2022). The ADLC offers a process for creating architecture and aids in the architect's comprehension and communication of the architecture's status. The architecture development lifecycle may be viewed as a comprehensive model that includes all of the tasks and outputs necessary to create a software architecture (Velasco-Elizondo & Cervantes, 2014:200). Figure 2-1 shows the graphical representation of the life cycle.The life cycle has four phases (Velasco-Elizondo & Cervantes, 2014:200):Architectural requirements analysis: To employ architectural needs as a driving force in the design of the architecture, the architectural requirements analysis process encompasses the tasks of soliciting, evaluating, defining, and prioritising architectural requirements. The architectural drivers, which reflect the primary functional and non-functional needs, including quality attributes requirements and restrictions, are an example of a process output.Architectural design The procedure used to support the architectural design phase of the architectural development lifecycle is focused on identifying and choosing the many structures that make up the architecture and that will satisfy the drivers identified in the architectural requirements analysis.Architectural documentation:The process of architectural documentation entails the creation of documents that outline the many structures that make up the architecture to effectively communicate it to the various system stakeholders. A collection of architectural views that describe the system's structures, the components that make it up, and the connections between them are a significant by-product of this process. A software architecture's details are difficult to convey in a single view, thus documenting the architecture entails producing a collection of pertinent views that may be divided into distinct categories.The architectural documentation technique used in this study is the 4+1 perspective model. The Logical View, Process View, Physical View, and Development View are among the five interconnected viewpoints taken into account by this methodology (Velasco-Elizondo & Cervantes, 2014:202). The Use Case perspective, around which the other views revolve, corresponds to the fifth view.Architectural evaluationThe main goal of a software architecture assessment is to evaluate a software architecture design to see if it complies with the necessary architectural requirements.Artefact developmentArchitectural requirement analysisDuring the first phase of the life cycle, an initial meeting was held with the client, Mr Thys Taljaard, to determine what the requirements for the architecture are. Elements that worked, did not work, and elements he would like to add were identified. Based on the requirements a comparison was done to determine which technology to use. Microsoft Power Platform, Amazon Web Services, Google Cloud, and .NET were compared based on cost, ease of use, and the time it would take to implement the end product in the business. Microsoft Power Platform is the technology that was chosen based on the following advantages:Power Apps is low code, which means there is no need for coding in traditional programming languages, which would have been necessary had any of the other options been chosen. This also ensured that all of the requirements were met within the time constraint. The users also do not need a lot of training to change the application.The Microsoft environment is used within the North-West University, including Power Platform. As such, there is no cost to using Power Apps in the enterprise. Architectural designAfter the technology was chosen, a decision had to be made on which data source to use: Dataverse, Dataverse for Teams, or SharePoint lists. Table 3-1 is a comparison of the three provided by Microsoft (Microsoft, 2022d).Table 31 Comparison of Dataverse, Dataverse for Teams, and SharePoint lists (Microsoft, 2022d)Because the architecture is for a micro-enterprise, it was decided that lists are adequate to satisfy the requirements. The data are not complex, nor is the amount of data so big that an unlimited number of rows is needed. A canvas application is created using the data-driven approach. The application is automatically generated by selecting the data source for the application.The security within lists is straightforward to implement. You need only give permissions to users based on whether they are an Owner or a Member. An Owner has read and write access to all lists, while a Member can only read or write certain lists. Additional permissions for a specific user can be given for each list. Reports are created by exporting a list to Microsoft Excel or Microsoft Power BI. This gives the user valuable information to make informed business decisions. Users at the enterprise who will use the reports are skilled enough in Excel to customize the reports how they want. Microsoft Power Automate is used to create flows for automation. It speeds up some processes, such as the approval process of a timesheet entry, or creating custom IDs for new projects.The canvas applications, the lists, and the cloud flows are added to a solution, which is then shared with a Microsoft Teams group. The employees of the enterprise are added to that group with their user permissions, and they can then use the applications.Architectural documentationThe 4+1 perspective model requires the following views for the documentation of an architecture: the logical view, the process view, the development view, the physical view, and the use case view. Previously generated artefacts are used to create these views (Velasco-Elizondo & Cervantes, 2014:202). Because this is the first version of the architecture, only a general data flow diagram and use case will be documented.Data flow diagramUse case viewArchitectural evaluationThe chosen architecture was presented to Mr Taljaard. He agreed that the architecture meets all the business requirements and was approved to proceed to the software development stage.Chapter 4  resultsThe research question that needs to be answered is how do you consider components of enterprise architecture to plan a technical architecture for a micro-enterprise?During this study, the following elements were identified that need to be considered when planning a technical architecture:The technical skills and computer literacy of the users,the financial feasibility of implementing the architecture,the availability of hardware needed to implement the architecture,the business requirements of the enterprise, andthe existing architecture and licensing of available technologies.Technical skills and computer literacy of the usersTwo main users were identified during the study: the administrative user and the employee user. The administrator will need more technical skills than the employees, as they will need to create reports in Excel, and especially if they want to change anything in the applications. The employees only need to know how to use a smartphone.Financial feasibilityThe architecture comes at no cost to the enterprise because of the existing use of the Microsoft Power Platform environment on the premises. However, if the architecture were to be implemented at a micro-enterprise that does not use the Microsoft environment, the expenses would be costly. A feasibility study would have to be completed to decide if the architecture is worth implementing.  Hardware availabilityBecause Microsoft Power Platform is cloud-based, no extra hardware is needed to implement the architecture. All the necessary hardware is already in use. Administrators need a computer with an active Internet connection, and employees need a smartphone with an active Internet connection. The applications can be used without an Internet connection, but the data will only be synced once the device is connected to the Internet.Business requirementsMr Taljaard required an architecture that would improve productivity, decrease the time spent on administrative tasks and generate reports for business decisions.  The time taken to complete a business process (such as filling in an employee timesheet) is much more effective because of the ease of use of the architecture.Existing architecture and available licensing of technologiesThe existing architecture was paper based. The administrative tasks and employee timesheets were completed on paper whereafter an administrator would enter the data into an Excel spreadsheet. The Microsoft environment is available to staff and students of the North-West University without the need for paying additional licensing fees. This includes access to Power Platform.chapter 5  reflectionThis project taught me how to identify a business problem and conduct research to solve it. I learned how to use different research methods to gain a deeper understanding of various concepts. If I could do this project again, I would take a different approach. I would document decisions more frequently and try to understand architectural concepts at a much earlier stage. I struggled to properly understand what exactly I was doing with this project, but I did gain clarity as time went on. I had the opportunity to work with new technologies that were used to implement the artefact, namely Microsoft Power Platform. I did not know of its existence nor how powerful it is until this project. It made me interested in low-code technologies and what can be done much quicker with less knowledge and skills than traditional programming languages such as C# and ASP.NET. The project objectives changed throughout the study, but the end product did satisfy all of them. I stated that I would present Mr Taljaard with different options for an architecture, but I made decisions without him based on cost. All other options were too expensive to consider.All project deliverables were submitted on time, as I had a good schedule that I followed. I created a schedule at the beginning of the project that I adapted as my schedule for all other modules changed. It worked very well.The way the honours project is structured is adequate but can be improved. Not all target dates were made while keeping in mind the workload of other modules and their deadlines, but I believe most students could submit their deliverables in time, especially those who followed a strict schedule. The classes need to be structured differently in terms of the topics of lectures and the dates of the lectures. We often had lectures on a topic weeks after it would have been beneficial.Bibliography Amazon Web Services (AWS). 2022. Cloud storage.  Date of access: 8 Jul. 2022.Bernaert, M., Poels, G., Snoeck, M. & Backer, M.D. 2014. Enterprise architecture for small and medium-sized enterprises: A starting point for bringing EA to SMEs, based on adoption models. In: Devos, J., Van Landeghem, H. & Deschoolmeester, D., eds. Information systems for small and medium-sized enterprises: State of art of IS research in SMEs. Berlin, Heidelberg: Springer. pp. 67-96. Bernard, S. 2012. An introduction to enterprise architecture. 3rd. IN, Bloomington: AuthorHouse.BTABoK. 2022. Architecture lifecycle.  Date of access: 22 Oct. 2022.Davis, F.D., Bagozzi, R.P. & Warshaw, P.R. 1989. User acceptance of computer technology: A comparison of two theoretical models. Management Science, 35(8):982-1003. Diamond, P. 2020. Cloud storage vs on-premises servers: 9 things to keep in mind.  Date of access: 19 Jul. 2022.Drake, N. & Turner, B. 2022. Best cloud databases in 2022.  Date of access: 26 Apr. 2022.Fisher, C. 2018. Cloud versus on-premise computing. American Journal of Industrial and Business Management, 8:1991-2006. 10.4236/ajibm.2018.89133Goerzig, D. & Bauernhansl, T. 2018. Enterprise architectures for the digital transformation in small and medium-sized enterprises. Procedia Cirp, 67:540-545. Haddara, M., Gothesen, S. & Langseth, M. 2022. Challenges of cloud-ERP adoptions in SMEs. Procedia Computer Science, 196:973-981. 10.1016/j.procs.2021.12.099Hafsi, M. & Assar, S. 2016. What enterprise architecture can bring for digital transformation: An exploratory study. In. 2016 IEEE 18th Conference on Business Informatics (CBI), Paris, France. IEEE. pp. 83-89.Hevner, A. & Chatterjee, S. 2010. Design science research in information systems. In. Design research in information systems: Springer. pp. 9-22. Hevner, A.R., March, S.T., Park, J. & Ram, S. 2004. Design science in information systems research. MIS Quarterly, 28(1):75-105. International Organization for Standardization (ISO) & International Electrotechnical Commission (IEC). 2011. Systems and software engineering - architecture description. Switzerland: ISO and IEC. (42010:2011).Jiyi Wu, Lingdi Ping, Xiaoping Ge, Ya Wang & Fu, J. 2010. Cloud storage as the infrastructure of cloud computing. In: Gong, M., ed. 2010 International Conference on Intelligent Computing and Cognitive Informatics, Malaysia. IEEE. pp. 380-383.Lankhorst, M. 2009. Enterprise architecture at work. 352. 3rd. Berlin: Springer.March, S.T. & Smith, G.F. 1995. Design and natural science research on information technology. Decision support systems, 15(4):251-266. Microsoft. 2022a. What are canvas apps?  Date of access: 22 Oct. 2022.Microsoft. 2022b. Azure active directory (azure ad).  Date of access: 22 Oct. 2022.Microsoft. 2022c. What is SharePoint?  Date of access: 22 Oct. 2022.Microsoft. 2022d. Comparing Microsoft lists, Dataverse for teams, and Dataverse.  Date of access: 22 Oct. 2022.Moody, D.L. 2003. The method evaluation model: A theoretical model for validating information systems design methods. In. European Conference on Information Systems, Naples, Italy. ECIS.Paracha, Z. 2021. What is the power platform?  Date of access: 22 Oct. 2022.Peffers, K., Tuunanen, T., Rothenberger, M.A. & Chatterjee, S. 2007. A design science research methodology for information systems research. Journal of management information systems, 24(3):45-77. Schloemmer, E. 2020. The power of SharePoint lists: 5 reasons why they are better than spreadsheets. . Date of access: 22 Oct. 2022.Sheppard, M. & Vibert, C. 2019. Re-examining the relationship between ease of use and usefulness for the net generation. Education and Information Technologies, 24(5):3205-3218. Tang, A., Jun, H. & Pin, C. 2004. A comparative analysis of architecture frameworks. Paper presented at the 11th Asia-Pacific Software Engineering Conference.The Open Group. 2018. The TOGAF standard. United States of America: The Open Group. (9.2).Velasco-Elizondo, P. & Cervantes, H. 2014. On software architecture processes and their use in practice. In. Agile estimation techniques and innovative approaches to software process improvement: IGI Global. pp. 198-218. Walls, J.G., Widmeyer, G.R. & El Sawy, O.A. 1992. Building an information system design theory for vigilant EIS. Information systems research, 3(1):36-59.appendicesEthical declarationITRI 671 Research ethics form: Honours projectName: Shené BoshoffTitle of project: Planning a technical architecture for a micro-enterpriseSupervisor: Susan CampherStarting and end dates of project:  24 February – 30 OctoberI declare that the information contained in this form is accurate. I have attempted to identify the risks that may arise in conducting this research and acknowledge my obligations and the rights of the participants. I confirm that the research will be conducted in line with all University, legal and ethical standards.Name of student: Shené BoshoffSignature: Date: 17/08/2022Name of study leader:Signature:Date:
Shené Boshoff 	31775357 	WVNS211 – Assignment 3 	27 February 2020The Christian worldview and scientific ideology on the existence of the universeIntroductionPeople with a Christian worldview believe in the Biblical story of the Creation which suggests that the earth, and subsequently the universe, was created by God (Bible, 2011: 61). If people with this worldview also reject scientific theories such as the big bang theory, it indicates that they have a specific ideology concerning the existence of the known universe. This essay distinguishes between the Christian worldview and scientific ideology in order to firstly determine whether the Christian worldview is deductive, inductive or abductive. Secondly, it determines what the effect on the scientific community would be if the Christian worldview were to be accepted as fact by society. Distinguishing between a worldview and an ideologyThe term ‘worldview’ refers to how people perceive the world and what they consider to be fact or fiction, while an ‘ideology’ refers to what people believe to be true, regardless of fact (Brown, 2019:33-52). Christianity can be considered both a worldview and an ideology since they have a specific way of looking at and understanding the world, believing in certain truths that are not necessarily accepted by all. Accordingly, Christians believe in an ideology that disregards any scientific theory that does not support the story of Creation as written in the book of Genesis. Is the Christian ideology’s foundation deductive, inductive, or abductive?Most Christians would argue that their ideology is deductive because of the evidence found in the Bible. In the book of Genesis, it states that, “In the beginning God created the heavens and the earth.” (Bible, 2011: 61), therefore indicating that God created the earth, and subsequently, the universe. Non-religious scientists would argue that Christianity as a whole is abductive because of the fact that there is no concrete evidence suggesting the existence of God or of any of the events written in the Bible (Coyne, 2018). Rodriguez (2012) states that Christianity should be argued with deductive, inductive, and abductive reasoning in mind because individuals perceive the Bible in different ways. I believe that the Christian ideology is abductive, because they base their beliefs on The Bible, a book that cannot scientifically be proven to be true. Conclusion: what would the impact on science be if this ideology were to be accepted by society?The first scientific theory looking at how the universe came into existence was created by Georges Lemaître (1894-1966), a Belgian priest, in the 1920s. This theory has come to be known as the Big Bang Theory and is widely accepted by the scientific community (Greshko, 2017). If society were to accept the Christian belief that God created the universe, every scientific theory regarding the existence of the universe would be disregarded. Science would be regarded as mere fairy tales while the biblical view would be revered as truth. It would have a tremendous impact on the way we do research into and look at the natural world. Bibliography Brown J.D.  2019.  Ideologies, worldviews, and personalities.  (In: Reflective Practice of Counseling and Psychotherapy in a Diverse Society).  https://link.springer.com/chapter/10.1007/978-3-030-24505-4_3  Date of access: 24 February 2020.The Holy Bible.  2011.  The Holy Bible: New International Version.  Michigan: Zondervan.Coyne, J.  2018.  Yes, there is a war between science and religion.  http://theconversation.com/yes-there-is-a-war-between-science-and-religion-108002  Date of access: 24 February 2020.Rodriguez, M.  2012.  Reasoning with Faith, Religion, and Atheism...The Final Thought of Reason (Part 9).  https://bittersweetend.wordpress.com/2012/09/23/reasoning-with-faith-relgion-and-atheism-the-final-thought-of-reason-part-9/  Date of access: 24 February 2020.Greshko, M.  2017.  Origins of the universe 101.  https://www.nationalgeographic.com/science/space/universe/origins-of-the-universe/  Date of access: 25 February 2020.
